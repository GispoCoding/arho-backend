"""add missing lifecycle dates for plan objects

Revision ID: a09325981a78
Revises: e0e4a44290ee
Create Date: 2024-04-09 17:30:37.239233

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "a09325981a78"
down_revision: Union[str, None] = "e0e4a44290ee"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "lifecycle_date",
        sa.Column("land_use_area_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("other_area_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("line_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("land_use_point_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("other_point_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.create_foreign_key(
        "land_use_point_id_fkey",
        "lifecycle_date",
        "land_use_point",
        ["land_use_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "line_id_fkey",
        "lifecycle_date",
        "line",
        ["line_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "land_use_area_id_fkey",
        "lifecycle_date",
        "land_use_area",
        ["land_use_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "other_area_id_fkey",
        "lifecycle_date",
        "other_area",
        ["other_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "other_point_id_fkey",
        "lifecycle_date",
        "other_point",
        ["other_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "other_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "other_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "land_use_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "line_id_fkey", "lifecycle_date", schema="hame", type_="foreignkey"
    )
    op.drop_constraint(
        "land_use_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("lifecycle_date", "other_point_id", schema="hame")
    op.drop_column("lifecycle_date", "land_use_point_id", schema="hame")
    op.drop_column("lifecycle_date", "line_id", schema="hame")
    op.drop_column("lifecycle_date", "other_area_id", schema="hame")
    op.drop_column("lifecycle_date", "land_use_area_id", schema="hame")
    # ### end Alembic commands ###
