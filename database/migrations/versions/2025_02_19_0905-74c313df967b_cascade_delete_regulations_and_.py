"""Cascade delete regulations and propositions

Revision ID: 74c313df967b
Revises: a58453037fcd
Create Date: 2025-02-19 09:05:17.015050

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "74c313df967b"
down_revision: Union[str, None] = "a58453037fcd"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "plan_proposition",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "plan_proposition",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "plan_regulation",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "plan_regulation",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "plan_proposition",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "plan_proposition",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    # ### end Alembic commands ###
