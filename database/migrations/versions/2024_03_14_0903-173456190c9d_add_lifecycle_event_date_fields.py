"""add_lifecycle_event_date_fields

Revision ID: 173456190c9d
Revises: 0a8a2fecda2a
Create Date: 2024-03-14 09:03:25.786608

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "173456190c9d"
down_revision: Union[str, None] = "0a8a2fecda2a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "land_use_area",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("land_use_area", "valid_to", schema="hame")
    op.add_column(
        "land_use_point",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("land_use_point", "valid_to", schema="hame")
    op.add_column(
        "line",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("line", "valid_to", schema="hame")
    op.add_column(
        "other_area",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("other_area", "valid_to", schema="hame")
    op.add_column(
        "other_point",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("other_point", "valid_to", schema="hame")
    op.add_column(
        "plan",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("plan", "valid_to", schema="hame")
    op.add_column(
        "plan_proposition",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("plan_proposition", "valid_to", schema="hame")
    op.add_column(
        "plan_regulation",
        sa.Column("initiated_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("prepared_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("proposed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("proposition_modified_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("approved_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("correction_requested_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("appealed_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "correction_requested_and_appealed_at",
            sa.DateTime(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("partly_valid_from", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("partly_valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("valid_before_plan_is_final", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("final_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("expired_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("rejected_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("suspended_at", sa.DateTime(), nullable=True),
        schema="hame",
    )
    op.drop_column("plan_regulation", "valid_to", schema="hame")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan_regulation",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("plan_regulation", "suspended_at", schema="hame")
    op.drop_column("plan_regulation", "rejected_at", schema="hame")
    op.drop_column("plan_regulation", "expired_at", schema="hame")
    op.drop_column("plan_regulation", "valid_until", schema="hame")
    op.drop_column("plan_regulation", "final_at", schema="hame")
    op.drop_column("plan_regulation", "valid_before_plan_is_final", schema="hame")
    op.drop_column("plan_regulation", "partly_valid_until", schema="hame")
    op.drop_column("plan_regulation", "partly_valid_from", schema="hame")
    op.drop_column(
        "plan_regulation",
        "correction_requested_and_appealed_at",
        schema="hame",
    )
    op.drop_column("plan_regulation", "appealed_at", schema="hame")
    op.drop_column("plan_regulation", "correction_requested_at", schema="hame")
    op.drop_column("plan_regulation", "approved_at", schema="hame")
    op.drop_column("plan_regulation", "proposition_modified_at", schema="hame")
    op.drop_column("plan_regulation", "proposed_at", schema="hame")
    op.drop_column("plan_regulation", "prepared_at", schema="hame")
    op.drop_column("plan_regulation", "initiated_at", schema="hame")
    op.add_column(
        "plan_proposition",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("plan_proposition", "suspended_at", schema="hame")
    op.drop_column("plan_proposition", "rejected_at", schema="hame")
    op.drop_column("plan_proposition", "expired_at", schema="hame")
    op.drop_column("plan_proposition", "valid_until", schema="hame")
    op.drop_column("plan_proposition", "final_at", schema="hame")
    op.drop_column("plan_proposition", "valid_before_plan_is_final", schema="hame")
    op.drop_column("plan_proposition", "partly_valid_until", schema="hame")
    op.drop_column("plan_proposition", "partly_valid_from", schema="hame")
    op.drop_column(
        "plan_proposition",
        "correction_requested_and_appealed_at",
        schema="hame",
    )
    op.drop_column("plan_proposition", "appealed_at", schema="hame")
    op.drop_column("plan_proposition", "correction_requested_at", schema="hame")
    op.drop_column("plan_proposition", "approved_at", schema="hame")
    op.drop_column("plan_proposition", "proposition_modified_at", schema="hame")
    op.drop_column("plan_proposition", "proposed_at", schema="hame")
    op.drop_column("plan_proposition", "prepared_at", schema="hame")
    op.drop_column("plan_proposition", "initiated_at", schema="hame")
    op.add_column(
        "plan",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("plan", "suspended_at", schema="hame")
    op.drop_column("plan", "rejected_at", schema="hame")
    op.drop_column("plan", "expired_at", schema="hame")
    op.drop_column("plan", "valid_until", schema="hame")
    op.drop_column("plan", "final_at", schema="hame")
    op.drop_column("plan", "valid_before_plan_is_final", schema="hame")
    op.drop_column("plan", "partly_valid_until", schema="hame")
    op.drop_column("plan", "partly_valid_from", schema="hame")
    op.drop_column("plan", "correction_requested_and_appealed_at", schema="hame")
    op.drop_column("plan", "appealed_at", schema="hame")
    op.drop_column("plan", "correction_requested_at", schema="hame")
    op.drop_column("plan", "proposition_modified_at", schema="hame")
    op.drop_column("plan", "proposed_at", schema="hame")
    op.drop_column("plan", "prepared_at", schema="hame")
    op.drop_column("plan", "initiated_at", schema="hame")
    op.add_column(
        "other_point",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("other_point", "suspended_at", schema="hame")
    op.drop_column("other_point", "rejected_at", schema="hame")
    op.drop_column("other_point", "expired_at", schema="hame")
    op.drop_column("other_point", "valid_until", schema="hame")
    op.drop_column("other_point", "final_at", schema="hame")
    op.drop_column("other_point", "valid_before_plan_is_final", schema="hame")
    op.drop_column("other_point", "partly_valid_until", schema="hame")
    op.drop_column("other_point", "partly_valid_from", schema="hame")
    op.drop_column("other_point", "correction_requested_and_appealed_at", schema="hame")
    op.drop_column("other_point", "appealed_at", schema="hame")
    op.drop_column("other_point", "correction_requested_at", schema="hame")
    op.drop_column("other_point", "approved_at", schema="hame")
    op.drop_column("other_point", "proposition_modified_at", schema="hame")
    op.drop_column("other_point", "proposed_at", schema="hame")
    op.drop_column("other_point", "prepared_at", schema="hame")
    op.drop_column("other_point", "initiated_at", schema="hame")
    op.add_column(
        "other_area",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("other_area", "suspended_at", schema="hame")
    op.drop_column("other_area", "rejected_at", schema="hame")
    op.drop_column("other_area", "expired_at", schema="hame")
    op.drop_column("other_area", "valid_until", schema="hame")
    op.drop_column("other_area", "final_at", schema="hame")
    op.drop_column("other_area", "valid_before_plan_is_final", schema="hame")
    op.drop_column("other_area", "partly_valid_until", schema="hame")
    op.drop_column("other_area", "partly_valid_from", schema="hame")
    op.drop_column("other_area", "correction_requested_and_appealed_at", schema="hame")
    op.drop_column("other_area", "appealed_at", schema="hame")
    op.drop_column("other_area", "correction_requested_at", schema="hame")
    op.drop_column("other_area", "approved_at", schema="hame")
    op.drop_column("other_area", "proposition_modified_at", schema="hame")
    op.drop_column("other_area", "proposed_at", schema="hame")
    op.drop_column("other_area", "prepared_at", schema="hame")
    op.drop_column("other_area", "initiated_at", schema="hame")
    op.add_column(
        "line",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("line", "suspended_at", schema="hame")
    op.drop_column("line", "rejected_at", schema="hame")
    op.drop_column("line", "expired_at", schema="hame")
    op.drop_column("line", "valid_until", schema="hame")
    op.drop_column("line", "final_at", schema="hame")
    op.drop_column("line", "valid_before_plan_is_final", schema="hame")
    op.drop_column("line", "partly_valid_until", schema="hame")
    op.drop_column("line", "partly_valid_from", schema="hame")
    op.drop_column("line", "correction_requested_and_appealed_at", schema="hame")
    op.drop_column("line", "appealed_at", schema="hame")
    op.drop_column("line", "correction_requested_at", schema="hame")
    op.drop_column("line", "approved_at", schema="hame")
    op.drop_column("line", "proposition_modified_at", schema="hame")
    op.drop_column("line", "proposed_at", schema="hame")
    op.drop_column("line", "prepared_at", schema="hame")
    op.drop_column("line", "initiated_at", schema="hame")
    op.add_column(
        "land_use_point",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("land_use_point", "suspended_at", schema="hame")
    op.drop_column("land_use_point", "rejected_at", schema="hame")
    op.drop_column("land_use_point", "expired_at", schema="hame")
    op.drop_column("land_use_point", "valid_until", schema="hame")
    op.drop_column("land_use_point", "final_at", schema="hame")
    op.drop_column("land_use_point", "valid_before_plan_is_final", schema="hame")
    op.drop_column("land_use_point", "partly_valid_until", schema="hame")
    op.drop_column("land_use_point", "partly_valid_from", schema="hame")
    op.drop_column(
        "land_use_point", "correction_requested_and_appealed_at", schema="hame"
    )
    op.drop_column("land_use_point", "appealed_at", schema="hame")
    op.drop_column("land_use_point", "correction_requested_at", schema="hame")
    op.drop_column("land_use_point", "approved_at", schema="hame")
    op.drop_column("land_use_point", "proposition_modified_at", schema="hame")
    op.drop_column("land_use_point", "proposed_at", schema="hame")
    op.drop_column("land_use_point", "prepared_at", schema="hame")
    op.drop_column("land_use_point", "initiated_at", schema="hame")
    op.add_column(
        "land_use_area",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_column("land_use_area", "suspended_at", schema="hame")
    op.drop_column("land_use_area", "rejected_at", schema="hame")
    op.drop_column("land_use_area", "expired_at", schema="hame")
    op.drop_column("land_use_area", "valid_until", schema="hame")
    op.drop_column("land_use_area", "final_at", schema="hame")
    op.drop_column("land_use_area", "valid_before_plan_is_final", schema="hame")
    op.drop_column("land_use_area", "partly_valid_until", schema="hame")
    op.drop_column("land_use_area", "partly_valid_from", schema="hame")
    op.drop_column(
        "land_use_area", "correction_requested_and_appealed_at", schema="hame"
    )
    op.drop_column("land_use_area", "appealed_at", schema="hame")
    op.drop_column("land_use_area", "correction_requested_at", schema="hame")
    op.drop_column("land_use_area", "approved_at", schema="hame")
    op.drop_column("land_use_area", "proposition_modified_at", schema="hame")
    op.drop_column("land_use_area", "proposed_at", schema="hame")
    op.drop_column("land_use_area", "prepared_at", schema="hame")
    op.drop_column("land_use_area", "initiated_at", schema="hame")
    # ### end Alembic commands ###
