"""m2m verbal regulation type

Revision ID: 2dbcbac65d4f
Revises: f90eb601dceb
Create Date: 2025-02-24 14:20:42.576116

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy import column, insert, select, table
from sqlalchemy.dialects.postgresql import UUID

# revision identifiers, used by Alembic.
revision: str = "2dbcbac65d4f"
down_revision: Union[str, None] = "f90eb601dceb"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

regulation_table = table(
    "plan_regulation",
    column("id", UUID),
    column("type_of_verbal_plan_regulation_id", UUID),
    schema="hame",
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    new_association_table = op.create_table(
        "type_of_verbal_regulation_association",
        sa.Column("plan_regulation_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "type_of_verbal_plan_regulation_id",
            sa.UUID(as_uuid=False),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["plan_regulation_id"],
            ["hame.plan_regulation.id"],
            name="plan_regulation_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_verbal_plan_regulation_id"],
            ["codes.type_of_verbal_plan_regulation.id"],
            name="type_of_verbal_plan_regulation_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "plan_regulation_id", "type_of_verbal_plan_regulation_id"
        ),
        schema="hame",
    )

    # Migrate existing data
    conn = op.get_bind()
    existing = select(
        regulation_table.c.id, regulation_table.c.type_of_verbal_plan_regulation_id
    ).where(regulation_table.c.type_of_verbal_plan_regulation_id.is_not(None))
    insert_stmt = insert(new_association_table).from_select(
        ["plan_regulation_id", "type_of_verbal_plan_regulation_id"], existing
    )
    conn.execute(insert_stmt)

    op.create_index(
        op.f(
            "ix_hame_type_of_verbal_regulation_association_type_of_verbal_plan_regulation_id"
        ),
        "type_of_verbal_regulation_association",
        ["type_of_verbal_plan_regulation_id"],
        unique=False,
        schema="hame",
    )
    op.drop_constraint(
        "type_of_verbal_plan_regulation_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column(
        "plan_regulation", "type_of_verbal_plan_regulation_id", schema="hame"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan_regulation",
        sa.Column(
            "type_of_verbal_plan_regulation_id",
            sa.UUID(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "type_of_verbal_plan_regulation_id_fkey",
        "plan_regulation",
        "type_of_verbal_plan_regulation",
        ["type_of_verbal_plan_regulation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.drop_index(
        op.f(
            "ix_hame_type_of_verbal_regulation_association_type_of_verbal_plan_regulation_id"
        ),
        table_name="type_of_verbal_regulation_association",
        schema="hame",
    )
    op.drop_table("type_of_verbal_regulation_association", schema="hame")
    # ### end Alembic commands ###
