"""add_triggers

Revision ID: 4f8bcdc437a8
Revises: fa20a2e8d45e
Create Date: 2024-05-07 14:29:59.969394

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "4f8bcdc437a8"
down_revision: Union[str, None] = "fa20a2e8d45e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "land_use_area",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=True,
        schema="hame",
    )
    op.alter_column(
        "land_use_point",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=True,
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("land_use_area_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("other_area_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("line_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("land_use_point_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("other_point_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.create_foreign_key(
        "line_id_fkey",
        "lifecycle_date",
        "line",
        ["line_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "land_use_area_id_fkey",
        "lifecycle_date",
        "land_use_area",
        ["land_use_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "other_area_id_fkey",
        "lifecycle_date",
        "other_area",
        ["other_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "land_use_point_id_fkey",
        "lifecycle_date",
        "land_use_point",
        ["land_use_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "other_point_id_fkey",
        "lifecycle_date",
        "other_point",
        ["other_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.alter_column(
        "line",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=True,
        schema="hame",
    )
    op.alter_column(
        "other_area",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=True,
        schema="hame",
    )
    op.alter_column(
        "other_point",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=True,
        schema="hame",
    )
    hame_trgfunc_modified_at = PGFunction(
        schema="hame",
        signature="trgfunc_modified_at()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.modified_at = CURRENT_TIMESTAMP;\n            return NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_modified_at)

    hame_trgfunc_land_use_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_land_use_area_new_lifecycle_date)

    hame_trgfunc_land_use_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_land_use_point_new_lifecycle_date)

    hame_trgfunc_line_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, line_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE line_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_line_new_lifecycle_date)

    hame_trgfunc_other_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_area_new_lifecycle_date)

    hame_trgfunc_other_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_point_new_lifecycle_date)

    hame_trgfunc_plan_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_new_lifecycle_date)

    hame_trgfunc_plan_proposition_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_proposition_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_proposition_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_new_lifecycle_date)

    hame_trgfunc_plan_regulation_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_regulation_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_regulation_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_new_lifecycle_date)

    hame_trgfunc_land_use_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.land_use_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_land_use_area_update_lifecycle_status)

    hame_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_land_use_point_update_lifecycle_status)

    hame_trgfunc_line_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.line\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_line_update_lifecycle_status)

    hame_trgfunc_other_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.other_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_area_update_lifecycle_status)

    hame_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_point_update_lifecycle_status)

    hame_trgfunc_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_update_lifecycle_status)

    hame_trgfunc_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_update_lifecycle_status)

    hame_trgfunc_add_plan_id_fkey = PGFunction(
        schema="hame",
        signature="trgfunc_add_plan_id_fkey()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        -- Get the most recent plan whose geometry contains the plan object\n        NEW.plan_id := (\n            SELECT id\n            FROM hame.plan\n            WHERE ST_Contains(geom, NEW.geom)\n            ORDER BY created_at DESC\n            LIMIT 1\n        );\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_add_plan_id_fkey)

    hame_document_trg_document_modified_at = PGTrigger(
        schema="hame",
        signature="trg_document_modified_at",
        on_entity="hame.document",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON document\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_document_trg_document_modified_at)

    hame_land_use_area_trg_land_use_area_modified_at = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_modified_at",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_land_use_area_trg_land_use_area_modified_at)

    hame_land_use_point_trg_land_use_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_modified_at",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_land_use_point_trg_land_use_point_modified_at)

    hame_lifecycle_date_trg_lifecycle_date_modified_at = PGTrigger(
        schema="hame",
        signature="trg_lifecycle_date_modified_at",
        on_entity="hame.lifecycle_date",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON lifecycle_date\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_lifecycle_date_trg_lifecycle_date_modified_at)

    hame_line_trg_line_modified_at = PGTrigger(
        schema="hame",
        signature="trg_line_modified_at",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_line_trg_line_modified_at)

    hame_organisation_trg_organisation_modified_at = PGTrigger(
        schema="hame",
        signature="trg_organisation_modified_at",
        on_entity="hame.organisation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON organisation\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_organisation_trg_organisation_modified_at)

    hame_other_area_trg_other_area_modified_at = PGTrigger(
        schema="hame",
        signature="trg_other_area_modified_at",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_other_area_trg_other_area_modified_at)

    hame_other_point_trg_other_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_other_point_modified_at",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_other_point_trg_other_point_modified_at)

    hame_plan_trg_plan_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_modified_at",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_plan_trg_plan_modified_at)

    hame_plan_proposition_trg_plan_proposition_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_modified_at",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_proposition\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_plan_proposition_trg_plan_proposition_modified_at)

    hame_plan_regulation_trg_plan_regulation_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_modified_at",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_plan_regulation_trg_plan_regulation_modified_at)

    hame_plan_regulation_group_trg_plan_regulation_group_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_group_modified_at",
        on_entity="hame.plan_regulation_group",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation_group\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_plan_regulation_group_trg_plan_regulation_group_modified_at)

    hame_source_data_trg_source_data_modified_at = PGTrigger(
        schema="hame",
        signature="trg_source_data_modified_at",
        on_entity="hame.source_data",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON source_data\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_source_data_trg_source_data_modified_at)

    hame_land_use_area_trg_land_use_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_date",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_area_new_lifecycle_date()",
    )
    op.create_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_date)

    hame_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_point_new_lifecycle_date()",
    )
    op.create_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_date)

    hame_line_trg_line_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_date",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON line\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_line_new_lifecycle_date()",
    )
    op.create_entity(hame_line_trg_line_new_lifecycle_date)

    hame_other_area_trg_other_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_date",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_area_new_lifecycle_date()",
    )
    op.create_entity(hame_other_area_trg_other_area_new_lifecycle_date)

    hame_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_point_new_lifecycle_date()",
    )
    op.create_entity(hame_other_point_trg_other_point_new_lifecycle_date)

    hame_plan_trg_plan_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_new_lifecycle_date",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_new_lifecycle_date()",
    )
    op.create_entity(hame_plan_trg_plan_new_lifecycle_date)

    hame_plan_proposition_trg_plan_proposition_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_new_lifecycle_date",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_proposition\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_proposition_new_lifecycle_date()",
    )
    op.create_entity(hame_plan_proposition_trg_plan_proposition_new_lifecycle_date)

    hame_plan_regulation_trg_plan_regulation_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_new_lifecycle_date",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_regulation\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_regulation_new_lifecycle_date()",
    )
    op.create_entity(hame_plan_regulation_trg_plan_regulation_new_lifecycle_date)

    hame_plan_trg_land_use_area_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_area_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_land_use_area_update_lifecycle_status)

    hame_plan_trg_land_use_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_point_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_land_use_point_update_lifecycle_status)

    hame_plan_trg_line_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_line_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_line_update_lifecycle_status)

    hame_plan_trg_other_area_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_area_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_other_area_update_lifecycle_status)

    hame_plan_trg_other_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_point_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_other_point_update_lifecycle_status)

    hame_plan_trg_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_plan_proposition_update_lifecycle_status)

    hame_plan_trg_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_plan_regulation_update_lifecycle_status)

    hame_land_use_area_trg_land_use_area_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_add_plan_id_fkey",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_land_use_area_trg_land_use_area_add_plan_id_fkey)

    hame_land_use_point_trg_land_use_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_add_plan_id_fkey",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_land_use_point_trg_land_use_point_add_plan_id_fkey)

    hame_line_trg_line_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_line_add_plan_id_fkey",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_line_trg_line_add_plan_id_fkey)

    hame_other_area_trg_other_area_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_other_area_add_plan_id_fkey",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_other_area_trg_other_area_add_plan_id_fkey)

    hame_other_point_trg_other_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_other_point_add_plan_id_fkey",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_other_point_trg_other_point_add_plan_id_fkey)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_other_point_trg_other_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_other_point_add_plan_id_fkey",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_other_point_trg_other_point_add_plan_id_fkey)

    hame_other_area_trg_other_area_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_other_area_add_plan_id_fkey",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_other_area_trg_other_area_add_plan_id_fkey)

    hame_line_trg_line_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_line_add_plan_id_fkey",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_line_trg_line_add_plan_id_fkey)

    hame_land_use_point_trg_land_use_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_add_plan_id_fkey",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_add_plan_id_fkey)

    hame_land_use_area_trg_land_use_area_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_add_plan_id_fkey",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_land_use_area_trg_land_use_area_add_plan_id_fkey)

    hame_plan_trg_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_plan_regulation_update_lifecycle_status)

    hame_plan_trg_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_plan_proposition_update_lifecycle_status)

    hame_plan_trg_other_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_point_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_other_point_update_lifecycle_status)

    hame_plan_trg_other_area_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_area_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_other_area_update_lifecycle_status)

    hame_plan_trg_line_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_line_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_line_update_lifecycle_status)

    hame_plan_trg_land_use_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_point_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_land_use_point_update_lifecycle_status)

    hame_plan_trg_land_use_area_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_area_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_land_use_area_update_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_new_lifecycle_date",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_regulation\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_regulation_new_lifecycle_date()",
    )
    op.drop_entity(hame_plan_regulation_trg_plan_regulation_new_lifecycle_date)

    hame_plan_proposition_trg_plan_proposition_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_new_lifecycle_date",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_proposition\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_proposition_new_lifecycle_date()",
    )
    op.drop_entity(hame_plan_proposition_trg_plan_proposition_new_lifecycle_date)

    hame_plan_trg_plan_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_new_lifecycle_date",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_new_lifecycle_date()",
    )
    op.drop_entity(hame_plan_trg_plan_new_lifecycle_date)

    hame_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_point_new_lifecycle_date()",
    )
    op.drop_entity(hame_other_point_trg_other_point_new_lifecycle_date)

    hame_other_area_trg_other_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_date",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_other_area_new_lifecycle_date()",
    )
    op.drop_entity(hame_other_area_trg_other_area_new_lifecycle_date)

    hame_line_trg_line_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_date",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON line\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_line_new_lifecycle_date()",
    )
    op.drop_entity(hame_line_trg_line_new_lifecycle_date)

    hame_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_point_new_lifecycle_date()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_date)

    hame_land_use_area_trg_land_use_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_date",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_land_use_area_new_lifecycle_date()",
    )
    op.drop_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_date)

    hame_source_data_trg_source_data_modified_at = PGTrigger(
        schema="hame",
        signature="trg_source_data_modified_at",
        on_entity="hame.source_data",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON source_data\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_source_data_trg_source_data_modified_at)

    hame_plan_regulation_group_trg_plan_regulation_group_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_group_modified_at",
        on_entity="hame.plan_regulation_group",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation_group\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_plan_regulation_group_trg_plan_regulation_group_modified_at)

    hame_plan_regulation_trg_plan_regulation_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_modified_at",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_plan_regulation_trg_plan_regulation_modified_at)

    hame_plan_proposition_trg_plan_proposition_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_modified_at",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_proposition\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_plan_proposition_trg_plan_proposition_modified_at)

    hame_plan_trg_plan_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_modified_at",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_plan_trg_plan_modified_at)

    hame_other_point_trg_other_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_other_point_modified_at",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_other_point_trg_other_point_modified_at)

    hame_other_area_trg_other_area_modified_at = PGTrigger(
        schema="hame",
        signature="trg_other_area_modified_at",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_other_area_trg_other_area_modified_at)

    hame_organisation_trg_organisation_modified_at = PGTrigger(
        schema="hame",
        signature="trg_organisation_modified_at",
        on_entity="hame.organisation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON organisation\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_organisation_trg_organisation_modified_at)

    hame_line_trg_line_modified_at = PGTrigger(
        schema="hame",
        signature="trg_line_modified_at",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_line_trg_line_modified_at)

    hame_lifecycle_date_trg_lifecycle_date_modified_at = PGTrigger(
        schema="hame",
        signature="trg_lifecycle_date_modified_at",
        on_entity="hame.lifecycle_date",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON lifecycle_date\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_lifecycle_date_trg_lifecycle_date_modified_at)

    hame_land_use_point_trg_land_use_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_modified_at",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_modified_at)

    hame_land_use_area_trg_land_use_area_modified_at = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_modified_at",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_land_use_area_trg_land_use_area_modified_at)

    hame_document_trg_document_modified_at = PGTrigger(
        schema="hame",
        signature="trg_document_modified_at",
        on_entity="hame.document",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON document\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_document_trg_document_modified_at)

    hame_trgfunc_add_plan_id_fkey = PGFunction(
        schema="hame",
        signature="trgfunc_add_plan_id_fkey()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        -- Get the most recent plan whose geometry contains the plan object\n        NEW.plan_id := (\n            SELECT id\n            FROM hame.plan\n            WHERE ST_Contains(geom, NEW.geom)\n            ORDER BY created_at DESC\n            LIMIT 1\n        );\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_add_plan_id_fkey)

    hame_trgfunc_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_update_lifecycle_status)

    hame_trgfunc_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_point_update_lifecycle_status)

    hame_trgfunc_other_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.other_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_area_update_lifecycle_status)

    hame_trgfunc_line_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.line\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_line_update_lifecycle_status)

    hame_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_point_update_lifecycle_status)

    hame_trgfunc_land_use_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.land_use_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_area_update_lifecycle_status)

    hame_trgfunc_plan_regulation_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_regulation_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_regulation_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_new_lifecycle_date)

    hame_trgfunc_plan_proposition_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_proposition_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_proposition_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_new_lifecycle_date)

    hame_trgfunc_plan_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_new_lifecycle_date)

    hame_trgfunc_other_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_point_new_lifecycle_date)

    hame_trgfunc_other_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_area_new_lifecycle_date)

    hame_trgfunc_line_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, line_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE line_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_line_new_lifecycle_date)

    hame_trgfunc_land_use_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_point_new_lifecycle_date)

    hame_trgfunc_land_use_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_area_new_lifecycle_date)

    hame_trgfunc_modified_at = PGFunction(
        schema="hame",
        signature="trgfunc_modified_at()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.modified_at = CURRENT_TIMESTAMP;\n            return NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_modified_at)

    op.alter_column(
        "other_point",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=False,
        schema="hame",
    )
    op.alter_column(
        "other_area",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=False,
        schema="hame",
    )
    op.alter_column(
        "line",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=False,
        schema="hame",
    )
    op.drop_constraint(
        "other_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "land_use_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "other_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "land_use_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "line_id_fkey", "lifecycle_date", schema="hame", type_="foreignkey"
    )
    op.drop_column("lifecycle_date", "other_point_id", schema="hame")
    op.drop_column("lifecycle_date", "land_use_point_id", schema="hame")
    op.drop_column("lifecycle_date", "line_id", schema="hame")
    op.drop_column("lifecycle_date", "other_area_id", schema="hame")
    op.drop_column("lifecycle_date", "land_use_area_id", schema="hame")
    op.alter_column(
        "land_use_point",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=False,
        schema="hame",
    )
    op.alter_column(
        "land_use_area",
        "plan_id",
        existing_type=sa.UUID(),
        nullable=False,
        schema="hame",
    )
    # ### end Alembic commands ###
