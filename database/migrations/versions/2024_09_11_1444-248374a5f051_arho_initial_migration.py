"""arho-initial-migration

Revision ID: 248374a5f051
Revises:
Create Date: 2024-09-11 14:44:31.533583

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "248374a5f051"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "administrative_region",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=3067,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.administrative_region.id"],
            name="administrative_region_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_administrative_region_level"),
        "administrative_region",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_administrative_region_parent_id"),
        "administrative_region",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_administrative_region_short_name"),
        "administrative_region",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_administrative_region_value"),
        "administrative_region",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "category_of_publicity",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.category_of_publicity.id"],
            name="category_of_publicity_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_category_of_publicity_level"),
        "category_of_publicity",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_category_of_publicity_parent_id"),
        "category_of_publicity",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_category_of_publicity_short_name"),
        "category_of_publicity",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_category_of_publicity_value"),
        "category_of_publicity",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "lifecycle_status",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.lifecycle_status.id"],
            name="lifecycle_status_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_lifecycle_status_level"),
        "lifecycle_status",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_lifecycle_status_parent_id"),
        "lifecycle_status",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_lifecycle_status_short_name"),
        "lifecycle_status",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_lifecycle_status_value"),
        "lifecycle_status",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "name_of_plan_case_decision",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.name_of_plan_case_decision.id"],
            name="name_of_plan_case_decision_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_name_of_plan_case_decision_level"),
        "name_of_plan_case_decision",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_name_of_plan_case_decision_parent_id"),
        "name_of_plan_case_decision",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_name_of_plan_case_decision_short_name"),
        "name_of_plan_case_decision",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_name_of_plan_case_decision_value"),
        "name_of_plan_case_decision",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "plan_theme",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.plan_theme.id"],
            name="plan_theme_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_theme_level"),
        "plan_theme",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_theme_parent_id"),
        "plan_theme",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_theme_short_name"),
        "plan_theme",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_theme_value"),
        "plan_theme",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "plan_type",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.plan_type.id"],
            name="plan_type_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_type_level"),
        "plan_type",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_type_parent_id"),
        "plan_type",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_type_short_name"),
        "plan_type",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_plan_type_value"),
        "plan_type",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_additional_information",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_additional_information.id"],
            name="type_of_additional_information_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_additional_information_level"),
        "type_of_additional_information",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_additional_information_parent_id"),
        "type_of_additional_information",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_additional_information_short_name"),
        "type_of_additional_information",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_additional_information_value"),
        "type_of_additional_information",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_decision_maker",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_decision_maker.id"],
            name="type_of_decision_maker_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_decision_maker_level"),
        "type_of_decision_maker",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_decision_maker_parent_id"),
        "type_of_decision_maker",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_decision_maker_short_name"),
        "type_of_decision_maker",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_decision_maker_value"),
        "type_of_decision_maker",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_document",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_document.id"],
            name="type_of_document_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_document_level"),
        "type_of_document",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_document_parent_id"),
        "type_of_document",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_document_short_name"),
        "type_of_document",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_document_value"),
        "type_of_document",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_interaction_event",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_interaction_event.id"],
            name="type_of_interaction_event_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_interaction_event_level"),
        "type_of_interaction_event",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_interaction_event_parent_id"),
        "type_of_interaction_event",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_interaction_event_short_name"),
        "type_of_interaction_event",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_interaction_event_value"),
        "type_of_interaction_event",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_plan_regulation",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_plan_regulation.id"],
            name="type_of_plan_regulation_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_level"),
        "type_of_plan_regulation",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_parent_id"),
        "type_of_plan_regulation",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_short_name"),
        "type_of_plan_regulation",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_value"),
        "type_of_plan_regulation",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_plan_regulation_group",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_plan_regulation_group.id"],
            name="type_of_plan_regulation_group_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_group_level"),
        "type_of_plan_regulation_group",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_group_parent_id"),
        "type_of_plan_regulation_group",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_group_short_name"),
        "type_of_plan_regulation_group",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_plan_regulation_group_value"),
        "type_of_plan_regulation_group",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_processing_event",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_processing_event.id"],
            name="type_of_processing_event_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_processing_event_level"),
        "type_of_processing_event",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_processing_event_parent_id"),
        "type_of_processing_event",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_processing_event_short_name"),
        "type_of_processing_event",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_processing_event_value"),
        "type_of_processing_event",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_source_data",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_source_data.id"],
            name="type_of_source_data_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_source_data_level"),
        "type_of_source_data",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_source_data_parent_id"),
        "type_of_source_data",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_source_data_short_name"),
        "type_of_source_data",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_source_data_value"),
        "type_of_source_data",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_underground",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_underground.id"],
            name="type_of_underground_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_underground_level"),
        "type_of_underground",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_underground_parent_id"),
        "type_of_underground",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_underground_short_name"),
        "type_of_underground",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_underground_value"),
        "type_of_underground",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "type_of_verbal_plan_regulation",
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("short_name", sa.String(), server_default="", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("level", sa.Integer(), server_default="1", nullable=False),
        sa.Column("parent_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["codes.type_of_verbal_plan_regulation.id"],
            name="type_of_verbal_plan_regulation_parent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_level"),
        "type_of_verbal_plan_regulation",
        ["level"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_parent_id"),
        "type_of_verbal_plan_regulation",
        ["parent_id"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_short_name"),
        "type_of_verbal_plan_regulation",
        ["short_name"],
        unique=False,
        schema="codes",
    )
    op.create_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_value"),
        "type_of_verbal_plan_regulation",
        ["value"],
        unique=True,
        schema="codes",
    )
    op.create_table(
        "organisation",
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("business_id", sa.String(), nullable=False),
        sa.Column("administrative_region_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["administrative_region_id"],
            ["codes.administrative_region.id"],
            name="administrative_region_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_table(
        "plan_regulation_group",
        sa.Column("short_name", sa.String(), nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column(
            "type_of_plan_regulation_group_id",
            sa.UUID(as_uuid=False),
            nullable=False,
        ),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["type_of_plan_regulation_group_id"],
            ["codes.type_of_plan_regulation_group.id"],
            name="type_of_plan_regulation_group_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_plan_regulation_group_short_name"),
        "plan_regulation_group",
        ["short_name"],
        unique=True,
        schema="arho",
    )
    op.create_table(
        "plan",
        sa.Column("organisation_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_type_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("permanent_plan_identifier", sa.String(), nullable=True),
        sa.Column("producers_plan_identifier", sa.String(), nullable=True),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("scale", sa.Integer(), nullable=True),
        sa.Column("matter_management_identifier", sa.String(), nullable=True),
        sa.Column("record_number", sa.String(), nullable=True),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=3067,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("validated_at", sa.DateTime(), nullable=True),
        sa.Column(
            "validation_errors",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("to_be_exported", sa.Boolean(), server_default="f", nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["organisation_id"],
            ["arho.organisation.id"],
            name="organisation_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_type_id"], ["codes.plan_type.id"], name="plan_type_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_plan_lifecycle_status_id"),
        "plan",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "plan_proposition",
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_theme_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "text_value",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_theme_id"],
            ["codes.plan_theme.id"],
            name="plan_theme_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_plan_proposition_lifecycle_status_id"),
        "plan_proposition",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_plan_proposition_ordering"),
        "plan_proposition",
        ["ordering"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "plan_regulation",
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "type_of_plan_regulation_id",
            sa.UUID(as_uuid=False),
            nullable=False,
        ),
        sa.Column(
            "type_of_verbal_plan_regulation_id",
            sa.UUID(as_uuid=False),
            nullable=True,
        ),
        sa.Column("plan_theme_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("intended_use_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("existence_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "regulation_type_additional_information_id",
            sa.UUID(as_uuid=False),
            nullable=True,
        ),
        sa.Column("significance_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("reservation_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("development_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("disturbance_prevention_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("construction_control_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("numeric_range", postgresql.NUMRANGE(), nullable=True),
        sa.Column("unit", sa.String(), nullable=True),
        sa.Column(
            "text_value",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("numeric_value", sa.Float(), nullable=True),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["construction_control_id"],
            ["codes.type_of_additional_information.id"],
            name="construction_control_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["development_id"],
            ["codes.type_of_additional_information.id"],
            name="development_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["disturbance_prevention_id"],
            ["codes.type_of_additional_information.id"],
            name="disturbance_prevention_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["existence_id"],
            ["codes.type_of_additional_information.id"],
            name="existence_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["intended_use_id"],
            ["codes.type_of_additional_information.id"],
            name="intended_use_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_theme_id"],
            ["codes.plan_theme.id"],
            name="plan_theme_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["regulation_type_additional_information_id"],
            ["codes.type_of_additional_information.id"],
            name="regulation_type_additional_information_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["reservation_id"],
            ["codes.type_of_additional_information.id"],
            name="reservation_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["significance_id"],
            ["codes.type_of_additional_information.id"],
            name="significance_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_plan_regulation_id"],
            ["codes.type_of_plan_regulation.id"],
            name="type_of_plan_regulation_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_verbal_plan_regulation_id"],
            ["codes.type_of_verbal_plan_regulation.id"],
            name="type_of_verbal_plan_regulation_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_plan_regulation_lifecycle_status_id"),
        "plan_regulation",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_plan_regulation_ordering"),
        "plan_regulation",
        ["ordering"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "document",
        sa.Column("type_of_document_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("category_of_publicity_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "permanent_document_identifier",
            sa.UUID(as_uuid=False),
            nullable=True,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("personal_details", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("decision", sa.Boolean(), nullable=False),
        sa.Column(
            "decision_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["category_of_publicity_id"],
            ["codes.category_of_publicity.id"],
            name="category_of_publicity_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["type_of_document_id"],
            ["codes.type_of_document.id"],
            name="type_of_document_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_table(
        "land_use_area",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=3067,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("source_data_object", sa.String(), nullable=True),
        sa.Column("height_range", postgresql.NUMRANGE(), nullable=True),
        sa.Column("height_unit", sa.String(), nullable=True),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column("type_of_underground_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name="type_of_underground_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_area_lifecycle_status_id"),
        "land_use_area",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_area_ordering"),
        "land_use_area",
        ["ordering"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_area_plan_id"),
        "land_use_area",
        ["plan_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_area_plan_regulation_group_id"),
        "land_use_area",
        ["plan_regulation_group_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_area_type_of_underground_id"),
        "land_use_area",
        ["type_of_underground_id"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "land_use_point",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOINT",
                srid=3067,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("source_data_object", sa.String(), nullable=True),
        sa.Column("height_range", postgresql.NUMRANGE(), nullable=True),
        sa.Column("height_unit", sa.String(), nullable=True),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column("type_of_underground_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name="type_of_underground_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_point_lifecycle_status_id"),
        "land_use_point",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_point_ordering"),
        "land_use_point",
        ["ordering"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_point_plan_id"),
        "land_use_point",
        ["plan_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_point_plan_regulation_group_id"),
        "land_use_point",
        ["plan_regulation_group_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_land_use_point_type_of_underground_id"),
        "land_use_point",
        ["type_of_underground_id"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "line",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTILINESTRING",
                srid=3067,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("source_data_object", sa.String(), nullable=True),
        sa.Column("height_range", postgresql.NUMRANGE(), nullable=True),
        sa.Column("height_unit", sa.String(), nullable=True),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column("type_of_underground_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name="type_of_underground_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_line_lifecycle_status_id"),
        "line",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_line_ordering"),
        "line",
        ["ordering"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_line_plan_id"),
        "line",
        ["plan_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_line_plan_regulation_group_id"),
        "line",
        ["plan_regulation_group_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_line_type_of_underground_id"),
        "line",
        ["type_of_underground_id"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "other_area",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=3067,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("source_data_object", sa.String(), nullable=True),
        sa.Column("height_range", postgresql.NUMRANGE(), nullable=True),
        sa.Column("height_unit", sa.String(), nullable=True),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column("type_of_underground_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name="type_of_underground_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_area_lifecycle_status_id"),
        "other_area",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_area_ordering"),
        "other_area",
        ["ordering"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_area_plan_id"),
        "other_area",
        ["plan_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_area_plan_regulation_group_id"),
        "other_area",
        ["plan_regulation_group_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_area_type_of_underground_id"),
        "other_area",
        ["type_of_underground_id"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "other_point",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOINT",
                srid=3067,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("source_data_object", sa.String(), nullable=True),
        sa.Column("height_range", postgresql.NUMRANGE(), nullable=True),
        sa.Column("height_unit", sa.String(), nullable=True),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column("type_of_underground_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("exported_at", sa.DateTime(), nullable=True),
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["arho.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name="type_of_underground_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_point_lifecycle_status_id"),
        "other_point",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_point_ordering"),
        "other_point",
        ["ordering"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_point_plan_id"),
        "other_point",
        ["plan_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_point_plan_regulation_group_id"),
        "other_point",
        ["plan_regulation_group_id"],
        unique=False,
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_other_point_type_of_underground_id"),
        "other_point",
        ["type_of_underground_id"],
        unique=False,
        schema="arho",
    )
    op.create_table(
        "source_data",
        sa.Column("type_of_source_data_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default='{"fin": "", "swe": "", "eng": ""}',
            nullable=False,
        ),
        sa.Column("additional_information_uri", sa.String(), nullable=False),
        sa.Column("detachment_date", sa.DateTime(), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["type_of_source_data_id"],
            ["codes.type_of_source_data.id"],
            name="type_of_source_data_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_table(
        "lifecycle_date",
        sa.Column("lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("land_use_area_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("other_area_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("line_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("land_use_point_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("other_point_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_regulation_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("plan_proposition_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("starting_at", sa.DateTime(), nullable=True),
        sa.Column("ending_at", sa.DateTime(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["land_use_area_id"],
            ["arho.land_use_area.id"],
            name="land_use_area_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["land_use_point_id"],
            ["arho.land_use_point.id"],
            name="land_use_point_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(["line_id"], ["arho.line.id"], name="line_id_fkey"),
        sa.ForeignKeyConstraint(
            ["other_area_id"],
            ["arho.other_area.id"],
            name="other_area_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["other_point_id"],
            ["arho.other_point.id"],
            name="other_point_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["arho.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["plan_proposition_id"],
            ["arho.plan_proposition.id"],
            name="plan_proposition_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_regulation_id"],
            ["arho.plan_regulation.id"],
            name="plan_regulation_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="arho",
    )
    op.create_index(
        op.f("ix_arho_lifecycle_date_lifecycle_status_id"),
        "lifecycle_date",
        ["lifecycle_status_id"],
        unique=False,
        schema="arho",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_arho_lifecycle_date_lifecycle_status_id"),
        table_name="lifecycle_date",
        schema="arho",
    )
    op.drop_table("lifecycle_date", schema="arho")
    op.drop_table("source_data", schema="arho")
    op.drop_index(
        op.f("ix_arho_other_point_type_of_underground_id"),
        table_name="other_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_point_plan_regulation_group_id"),
        table_name="other_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_point_plan_id"),
        table_name="other_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_point_ordering"),
        table_name="other_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_point_lifecycle_status_id"),
        table_name="other_point",
        schema="arho",
    )
    op.drop_table("other_point", schema="arho")
    op.drop_index(
        op.f("ix_arho_other_area_type_of_underground_id"),
        table_name="other_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_area_plan_regulation_group_id"),
        table_name="other_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_area_plan_id"),
        table_name="other_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_area_ordering"),
        table_name="other_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_other_area_lifecycle_status_id"),
        table_name="other_area",
        schema="arho",
    )
    op.drop_table("other_area", schema="arho")
    op.drop_index(
        op.f("ix_arho_line_type_of_underground_id"),
        table_name="line",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_line_plan_regulation_group_id"),
        table_name="line",
        schema="arho",
    )
    op.drop_index(op.f("ix_arho_line_plan_id"), table_name="line", schema="arho")
    op.drop_index(op.f("ix_arho_line_ordering"), table_name="line", schema="arho")
    op.drop_index(
        op.f("ix_arho_line_lifecycle_status_id"),
        table_name="line",
        schema="arho",
    )
    op.drop_table("line", schema="arho")
    op.drop_index(
        op.f("ix_arho_land_use_point_type_of_underground_id"),
        table_name="land_use_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_point_plan_regulation_group_id"),
        table_name="land_use_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_point_plan_id"),
        table_name="land_use_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_point_ordering"),
        table_name="land_use_point",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_point_lifecycle_status_id"),
        table_name="land_use_point",
        schema="arho",
    )
    op.drop_table("land_use_point", schema="arho")
    op.drop_index(
        op.f("ix_arho_land_use_area_type_of_underground_id"),
        table_name="land_use_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_area_plan_regulation_group_id"),
        table_name="land_use_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_area_plan_id"),
        table_name="land_use_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_area_ordering"),
        table_name="land_use_area",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_land_use_area_lifecycle_status_id"),
        table_name="land_use_area",
        schema="arho",
    )
    op.drop_table("land_use_area", schema="arho")
    op.drop_table("document", schema="arho")
    op.drop_index(
        op.f("ix_arho_plan_regulation_ordering"),
        table_name="plan_regulation",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_plan_regulation_lifecycle_status_id"),
        table_name="plan_regulation",
        schema="arho",
    )
    op.drop_table("plan_regulation", schema="arho")
    op.drop_index(
        op.f("ix_arho_plan_proposition_ordering"),
        table_name="plan_proposition",
        schema="arho",
    )
    op.drop_index(
        op.f("ix_arho_plan_proposition_lifecycle_status_id"),
        table_name="plan_proposition",
        schema="arho",
    )
    op.drop_table("plan_proposition", schema="arho")
    op.drop_index(
        op.f("ix_arho_plan_lifecycle_status_id"),
        table_name="plan",
        schema="arho",
    )
    op.drop_table("plan", schema="arho")
    op.drop_index(
        op.f("ix_arho_plan_regulation_group_short_name"),
        table_name="plan_regulation_group",
        schema="arho",
    )
    op.drop_table("plan_regulation_group", schema="arho")
    op.drop_table("organisation", schema="arho")
    op.drop_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_value"),
        table_name="type_of_verbal_plan_regulation",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_short_name"),
        table_name="type_of_verbal_plan_regulation",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_parent_id"),
        table_name="type_of_verbal_plan_regulation",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_verbal_plan_regulation_level"),
        table_name="type_of_verbal_plan_regulation",
        schema="codes",
    )
    op.drop_table("type_of_verbal_plan_regulation", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_underground_value"),
        table_name="type_of_underground",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_underground_short_name"),
        table_name="type_of_underground",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_underground_parent_id"),
        table_name="type_of_underground",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_underground_level"),
        table_name="type_of_underground",
        schema="codes",
    )
    op.drop_table("type_of_underground", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_source_data_value"),
        table_name="type_of_source_data",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_source_data_short_name"),
        table_name="type_of_source_data",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_source_data_parent_id"),
        table_name="type_of_source_data",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_source_data_level"),
        table_name="type_of_source_data",
        schema="codes",
    )
    op.drop_table("type_of_source_data", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_processing_event_value"),
        table_name="type_of_processing_event",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_processing_event_short_name"),
        table_name="type_of_processing_event",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_processing_event_parent_id"),
        table_name="type_of_processing_event",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_processing_event_level"),
        table_name="type_of_processing_event",
        schema="codes",
    )
    op.drop_table("type_of_processing_event", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_group_value"),
        table_name="type_of_plan_regulation_group",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_group_short_name"),
        table_name="type_of_plan_regulation_group",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_group_parent_id"),
        table_name="type_of_plan_regulation_group",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_group_level"),
        table_name="type_of_plan_regulation_group",
        schema="codes",
    )
    op.drop_table("type_of_plan_regulation_group", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_value"),
        table_name="type_of_plan_regulation",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_short_name"),
        table_name="type_of_plan_regulation",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_parent_id"),
        table_name="type_of_plan_regulation",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_plan_regulation_level"),
        table_name="type_of_plan_regulation",
        schema="codes",
    )
    op.drop_table("type_of_plan_regulation", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_interaction_event_value"),
        table_name="type_of_interaction_event",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_interaction_event_short_name"),
        table_name="type_of_interaction_event",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_interaction_event_parent_id"),
        table_name="type_of_interaction_event",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_interaction_event_level"),
        table_name="type_of_interaction_event",
        schema="codes",
    )
    op.drop_table("type_of_interaction_event", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_document_value"),
        table_name="type_of_document",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_document_short_name"),
        table_name="type_of_document",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_document_parent_id"),
        table_name="type_of_document",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_document_level"),
        table_name="type_of_document",
        schema="codes",
    )
    op.drop_table("type_of_document", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_decision_maker_value"),
        table_name="type_of_decision_maker",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_decision_maker_short_name"),
        table_name="type_of_decision_maker",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_decision_maker_parent_id"),
        table_name="type_of_decision_maker",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_decision_maker_level"),
        table_name="type_of_decision_maker",
        schema="codes",
    )
    op.drop_table("type_of_decision_maker", schema="codes")
    op.drop_index(
        op.f("ix_codes_type_of_additional_information_value"),
        table_name="type_of_additional_information",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_additional_information_short_name"),
        table_name="type_of_additional_information",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_additional_information_parent_id"),
        table_name="type_of_additional_information",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_type_of_additional_information_level"),
        table_name="type_of_additional_information",
        schema="codes",
    )
    op.drop_table("type_of_additional_information", schema="codes")
    op.drop_index(
        op.f("ix_codes_plan_type_value"),
        table_name="plan_type",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_plan_type_short_name"),
        table_name="plan_type",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_plan_type_parent_id"),
        table_name="plan_type",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_plan_type_level"),
        table_name="plan_type",
        schema="codes",
    )
    op.drop_table("plan_type", schema="codes")
    op.drop_index(
        op.f("ix_codes_plan_theme_value"),
        table_name="plan_theme",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_plan_theme_short_name"),
        table_name="plan_theme",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_plan_theme_parent_id"),
        table_name="plan_theme",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_plan_theme_level"),
        table_name="plan_theme",
        schema="codes",
    )
    op.drop_table("plan_theme", schema="codes")
    op.drop_index(
        op.f("ix_codes_name_of_plan_case_decision_value"),
        table_name="name_of_plan_case_decision",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_name_of_plan_case_decision_short_name"),
        table_name="name_of_plan_case_decision",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_name_of_plan_case_decision_parent_id"),
        table_name="name_of_plan_case_decision",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_name_of_plan_case_decision_level"),
        table_name="name_of_plan_case_decision",
        schema="codes",
    )
    op.drop_table("name_of_plan_case_decision", schema="codes")
    op.drop_index(
        op.f("ix_codes_lifecycle_status_value"),
        table_name="lifecycle_status",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_lifecycle_status_short_name"),
        table_name="lifecycle_status",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_lifecycle_status_parent_id"),
        table_name="lifecycle_status",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_lifecycle_status_level"),
        table_name="lifecycle_status",
        schema="codes",
    )
    op.drop_table("lifecycle_status", schema="codes")
    op.drop_index(
        op.f("ix_codes_category_of_publicity_value"),
        table_name="category_of_publicity",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_category_of_publicity_short_name"),
        table_name="category_of_publicity",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_category_of_publicity_parent_id"),
        table_name="category_of_publicity",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_category_of_publicity_level"),
        table_name="category_of_publicity",
        schema="codes",
    )
    op.drop_table("category_of_publicity", schema="codes")
    op.drop_index(
        op.f("ix_codes_administrative_region_value"),
        table_name="administrative_region",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_administrative_region_short_name"),
        table_name="administrative_region",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_administrative_region_parent_id"),
        table_name="administrative_region",
        schema="codes",
    )
    op.drop_index(
        op.f("ix_codes_administrative_region_level"),
        table_name="administrative_region",
        schema="codes",
    )
    op.drop_table("administrative_region", schema="codes")
    # ### end Alembic commands ###
