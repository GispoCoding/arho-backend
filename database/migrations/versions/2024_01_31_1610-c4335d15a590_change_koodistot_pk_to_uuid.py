"""change koodistot pk to uuid

Revision ID: c4335d15a590
Revises: 9615d0602f12
Create Date: 2024-01-31 16:10:59.041256

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# import geoalchemy2


# revision identifiers, used by Alembic.
revision: str = "c4335d15a590"
down_revision: Union[str, None] = "9615d0602f12"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "plan_lifecycle_status_id_fkey", "plan", schema="hame", type_="foreignkey"
    )
    op.drop_column("plan", "lifecycle_status_id", schema="hame")
    op.drop_column("lifecycle_status", "id", schema="codes")
    op.add_column(
        "lifecycle_status",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        schema="codes",
    )
    op.create_primary_key(
        "lifecycle_status_pkey", "lifecycle_status", ["id"], schema="codes"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("lifecycle_status", "id", schema="codes")
    op.add_column(
        "lifecycle_status",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        schema="codes",
    )
    op.create_primary_key(
        "lifecycle_status_pkey", "lifecycle_status", ["id"], schema="codes"
    )
    op.add_column(
        "plan",
        sa.Column(
            "lifecycle_status_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "plan_lifecycle_status_id_fkey",
        "plan",
        "lifecycle_status",
        ["lifecycle_status_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    # ### end Alembic commands ###
