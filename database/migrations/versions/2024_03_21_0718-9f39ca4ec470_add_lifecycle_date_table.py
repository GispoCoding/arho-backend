"""add_lifecycle_date_table

Revision ID: 9f39ca4ec470
Revises: 0a8a2fecda2a
Create Date: 2024-03-21 07:18:35.400587

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9f39ca4ec470"
down_revision: Union[str, None] = "0a8a2fecda2a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "lifecycle_date",
        sa.Column("lifecycle_status_id", sa.UUID(), nullable=False),
        sa.Column("plan_id", sa.UUID(), nullable=False),
        sa.Column("plan_regulation_id", sa.UUID(), nullable=False),
        sa.Column("plan_proposition_id", sa.UUID(), nullable=False),
        sa.Column("starting_at", sa.DateTime(), nullable=True),
        sa.Column("ending_at", sa.DateTime(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(["plan_id"], ["hame.plan.id"], name="plan_id_fkey"),
        sa.ForeignKeyConstraint(
            ["plan_proposition_id"],
            ["hame.plan_proposition.id"],
            name="plan_proposition_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_regulation_id"],
            ["hame.plan_regulation.id"],
            name="plan_regulation_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_lifecycle_date_lifecycle_status_id"),
        "lifecycle_date",
        ["lifecycle_status_id"],
        unique=False,
        schema="hame",
    )
    op.drop_column("land_use_area", "valid_from", schema="hame")
    op.drop_column("land_use_area", "repealed_at", schema="hame")
    op.drop_column("land_use_area", "valid_to", schema="hame")
    op.drop_column("land_use_point", "valid_from", schema="hame")
    op.drop_column("land_use_point", "repealed_at", schema="hame")
    op.drop_column("land_use_point", "valid_to", schema="hame")
    op.drop_column("line", "valid_from", schema="hame")
    op.drop_column("line", "repealed_at", schema="hame")
    op.drop_column("line", "valid_to", schema="hame")
    op.drop_column("other_area", "valid_from", schema="hame")
    op.drop_column("other_area", "repealed_at", schema="hame")
    op.drop_column("other_area", "valid_to", schema="hame")
    op.drop_column("other_point", "valid_from", schema="hame")
    op.drop_column("other_point", "repealed_at", schema="hame")
    op.drop_column("other_point", "valid_to", schema="hame")
    op.drop_column("plan", "valid_from", schema="hame")
    op.drop_column("plan", "repealed_at", schema="hame")
    op.drop_column("plan", "valid_to", schema="hame")
    op.drop_column("plan", "approved_at", schema="hame")
    op.drop_column("plan_proposition", "valid_from", schema="hame")
    op.drop_column("plan_proposition", "repealed_at", schema="hame")
    op.drop_column("plan_proposition", "valid_to", schema="hame")
    op.drop_column("plan_regulation", "valid_from", schema="hame")
    op.drop_column("plan_regulation", "repealed_at", schema="hame")
    op.drop_column("plan_regulation", "valid_to", schema="hame")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan_regulation",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_proposition",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column(
            "approved_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column(
            "repealed_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_lifecycle_date_lifecycle_status_id"),
        table_name="lifecycle_date",
        schema="hame",
    )
    op.drop_table("lifecycle_date", schema="hame")
    # ### end Alembic commands ###
