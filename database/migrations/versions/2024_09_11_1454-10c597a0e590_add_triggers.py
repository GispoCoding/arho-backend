"""add-triggers

Revision ID: 10c597a0e590
Revises: 248374a5f051
Create Date: 2024-09-11 14:54:42.624495

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "10c597a0e590"
down_revision: Union[str, None] = "248374a5f051"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    arho_trgfunc_modified_at = PGFunction(
        schema="arho",
        signature="trgfunc_modified_at()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.modified_at = CURRENT_TIMESTAMP;\n            return NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_modified_at)

    arho_trgfunc_land_use_area_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, land_use_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_land_use_area_new_lifecycle_date)

    arho_trgfunc_land_use_point_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, land_use_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_land_use_point_new_lifecycle_date)

    arho_trgfunc_line_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_line_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, line_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE line_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_line_new_lifecycle_date)

    arho_trgfunc_other_area_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, other_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_area_new_lifecycle_date)

    arho_trgfunc_other_point_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, other_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_point_new_lifecycle_date)

    arho_trgfunc_plan_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_plan_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, plan_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_new_lifecycle_date)

    arho_trgfunc_plan_proposition_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, plan_proposition_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_proposition_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_proposition_new_lifecycle_date)

    arho_trgfunc_plan_regulation_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, plan_regulation_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_regulation_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_regulation_new_lifecycle_date)

    arho_trgfunc_land_use_area_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.land_use_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_land_use_area_update_lifecycle_status)

    arho_trgfunc_land_use_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_land_use_area_plan_regulation_update_lifecycle_status)

    arho_trgfunc_land_use_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(
        arho_trgfunc_land_use_area_plan_proposition_update_lifecycle_status
    )

    arho_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_land_use_point_update_lifecycle_status)

    arho_trgfunc_land_use_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(
        arho_trgfunc_land_use_point_plan_regulation_update_lifecycle_status
    )

    arho_trgfunc_land_use_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(
        arho_trgfunc_land_use_point_plan_proposition_update_lifecycle_status
    )

    arho_trgfunc_line_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.line\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_line_update_lifecycle_status)

    arho_trgfunc_line_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_line_plan_regulation_update_lifecycle_status)

    arho_trgfunc_line_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_line_plan_proposition_update_lifecycle_status)

    arho_trgfunc_other_area_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.other_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_area_update_lifecycle_status)

    arho_trgfunc_other_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_area_plan_regulation_update_lifecycle_status)

    arho_trgfunc_other_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_area_plan_proposition_update_lifecycle_status)

    arho_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_point_update_lifecycle_status)

    arho_trgfunc_other_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_point_plan_regulation_update_lifecycle_status)

    arho_trgfunc_other_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_point_plan_proposition_update_lifecycle_status)

    arho_trgfunc_plan_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_plan_regulation_update_lifecycle_status)

    arho_trgfunc_plan_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_plan_proposition_update_lifecycle_status)

    arho_trgfunc_land_use_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_land_use_area_new_lifecycle_status)

    arho_trgfunc_plan_regulation_land_use_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_regulation_land_use_area_new_lifecycle_status)

    arho_trgfunc_plan_proposition_land_use_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_proposition_land_use_area_new_lifecycle_status)

    arho_trgfunc_land_use_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_land_use_point_new_lifecycle_status)

    arho_trgfunc_plan_regulation_land_use_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_regulation_land_use_point_new_lifecycle_status)

    arho_trgfunc_plan_proposition_land_use_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_proposition_land_use_point_new_lifecycle_status)

    arho_trgfunc_line_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_line_new_lifecycle_status)

    arho_trgfunc_plan_regulation_line_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_regulation_line_new_lifecycle_status)

    arho_trgfunc_plan_proposition_line_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_proposition_line_new_lifecycle_status)

    arho_trgfunc_other_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_area_new_lifecycle_status)

    arho_trgfunc_plan_regulation_other_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_regulation_other_area_new_lifecycle_status)

    arho_trgfunc_plan_proposition_other_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_proposition_other_area_new_lifecycle_status)

    arho_trgfunc_other_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_point_new_lifecycle_status)

    arho_trgfunc_plan_regulation_other_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_regulation_other_point_new_lifecycle_status)

    arho_trgfunc_plan_proposition_other_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_proposition_other_point_new_lifecycle_status)

    arho_trgfunc_plan_regulation_plan_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM arho.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_regulation_plan_new_lifecycle_status)

    arho_trgfunc_plan_proposition_plan_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM arho.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_plan_proposition_plan_new_lifecycle_status)

    arho_trgfunc_add_plan_id_fkey = PGFunction(
        schema="arho",
        signature="trgfunc_add_plan_id_fkey()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        -- Get the most recent plan whose geometry contains the plan object\n        NEW.plan_id := (\n            SELECT id\n            FROM arho.plan\n            WHERE ST_Contains(geom, NEW.geom)\n            ORDER BY created_at DESC\n            LIMIT 1\n        );\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_add_plan_id_fkey)

    arho_trgfunc_validate_polygon_geometry = PGFunction(
        schema="arho",
        signature="trgfunc_validate_polygon_geometry()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        IF NOT ST_IsValid(NEW.geom) THEN\n            RAISE EXCEPTION 'Invalid geometry. Must follow OGC rules.';\n        END IF;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_validate_polygon_geometry)

    arho_trgfunc_line_validate_geometry = PGFunction(
        schema="arho",
        signature="trgfunc_line_validate_geometry()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        IF NOT ST_IsSimple(NEW.geom) THEN\n            RAISE EXCEPTION 'Invalid geometry. Must not intersect itself.';\n        END IF;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_line_validate_geometry)

    arho_trgfunc_other_area_insert_intersecting_geometries = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_insert_intersecting_geometries()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        -- Check if the new entry has id of a plan_regulation_group\n        -- which has id of a plan_regulation that has intended_use_id\n        -- that equals to 'paakayttotarkoitus'\n        IF EXISTS (\n            SELECT 1\n            FROM arho.plan_regulation_group prg\n            JOIN arho.plan_regulation pr ON pr.plan_regulation_group_id = prg.id\n            JOIN codes.type_of_additional_information tai ON tai.id = pr.intended_use_id\n            WHERE tai.value = 'paakayttotarkoitus'\n            AND prg.id = NEW.plan_regulation_group_id\n        ) THEN\n            -- check if there already is an entry in other_area table with the same\n            -- plan_regulation_group that the new geometry intersects\n            IF EXISTS (\n                SELECT 1\n                FROM arho.other_area oa\n                WHERE oa.plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND ST_Intersects(oa.geom, NEW.geom)\n            ) THEN\n                RAISE EXCEPTION 'New entry intersects with existing entry, both with\n                intended_use of paakayttotarkoitus';\n            END IF;\n        END IF;\n\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.create_entity(arho_trgfunc_other_area_insert_intersecting_geometries)

    arho_document_trg_document_modified_at = PGTrigger(
        schema="arho",
        signature="trg_document_modified_at",
        on_entity="arho.document",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON document\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_document_trg_document_modified_at)

    arho_land_use_area_trg_land_use_area_modified_at = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_modified_at",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_land_use_area_trg_land_use_area_modified_at)

    arho_land_use_point_trg_land_use_point_modified_at = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_modified_at",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_land_use_point_trg_land_use_point_modified_at)

    arho_lifecycle_date_trg_lifecycle_date_modified_at = PGTrigger(
        schema="arho",
        signature="trg_lifecycle_date_modified_at",
        on_entity="arho.lifecycle_date",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON lifecycle_date\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_lifecycle_date_trg_lifecycle_date_modified_at)

    arho_line_trg_line_modified_at = PGTrigger(
        schema="arho",
        signature="trg_line_modified_at",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_line_trg_line_modified_at)

    arho_organisation_trg_organisation_modified_at = PGTrigger(
        schema="arho",
        signature="trg_organisation_modified_at",
        on_entity="arho.organisation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON organisation\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_organisation_trg_organisation_modified_at)

    arho_other_area_trg_other_area_modified_at = PGTrigger(
        schema="arho",
        signature="trg_other_area_modified_at",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_other_area_trg_other_area_modified_at)

    arho_other_point_trg_other_point_modified_at = PGTrigger(
        schema="arho",
        signature="trg_other_point_modified_at",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_other_point_trg_other_point_modified_at)

    arho_plan_trg_plan_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_modified_at",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_plan_trg_plan_modified_at)

    arho_plan_proposition_trg_plan_proposition_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_modified_at",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_proposition\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_plan_proposition_trg_plan_proposition_modified_at)

    arho_plan_regulation_trg_plan_regulation_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_modified_at",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_plan_regulation_trg_plan_regulation_modified_at)

    arho_plan_regulation_group_trg_plan_regulation_group_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_group_modified_at",
        on_entity="arho.plan_regulation_group",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation_group\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_plan_regulation_group_trg_plan_regulation_group_modified_at)

    arho_source_data_trg_source_data_modified_at = PGTrigger(
        schema="arho",
        signature="trg_source_data_modified_at",
        on_entity="arho.source_data",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON source_data\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.create_entity(arho_source_data_trg_source_data_modified_at)

    arho_land_use_area_trg_land_use_area_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_new_lifecycle_date",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_area_new_lifecycle_date()",
    )
    op.create_entity(arho_land_use_area_trg_land_use_area_new_lifecycle_date)

    arho_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_point_new_lifecycle_date()",
    )
    op.create_entity(arho_land_use_point_trg_land_use_point_new_lifecycle_date)

    arho_line_trg_line_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_line_new_lifecycle_date",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON line\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_line_new_lifecycle_date()",
    )
    op.create_entity(arho_line_trg_line_new_lifecycle_date)

    arho_other_area_trg_other_area_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_other_area_new_lifecycle_date",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_area_new_lifecycle_date()",
    )
    op.create_entity(arho_other_area_trg_other_area_new_lifecycle_date)

    arho_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_point_new_lifecycle_date()",
    )
    op.create_entity(arho_other_point_trg_other_point_new_lifecycle_date)

    arho_plan_trg_plan_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_plan_new_lifecycle_date",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_new_lifecycle_date()",
    )
    op.create_entity(arho_plan_trg_plan_new_lifecycle_date)

    arho_plan_proposition_trg_plan_proposition_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_new_lifecycle_date",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_proposition\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_proposition_new_lifecycle_date()",
    )
    op.create_entity(arho_plan_proposition_trg_plan_proposition_new_lifecycle_date)

    arho_plan_regulation_trg_plan_regulation_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_new_lifecycle_date",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_regulation\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_regulation_new_lifecycle_date()",
    )
    op.create_entity(arho_plan_regulation_trg_plan_regulation_new_lifecycle_date)

    arho_plan_trg_land_use_area_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_area_update_lifecycle_status()",
    )
    op.create_entity(arho_plan_trg_land_use_area_update_lifecycle_status)

    arho_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_plan_regulation_update_lifecycle_status",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        arho_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status
    )

    arho_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_plan_proposition_update_lifecycle_status",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        arho_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status
    )

    arho_plan_trg_land_use_point_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_point_update_lifecycle_status()",
    )
    op.create_entity(arho_plan_trg_land_use_point_update_lifecycle_status)

    arho_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_plan_regulation_update_lifecycle_status",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        arho_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status
    )

    arho_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_plan_proposition_update_lifecycle_status",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        arho_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status
    )

    arho_plan_trg_line_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_line_update_lifecycle_status()",
    )
    op.create_entity(arho_plan_trg_line_update_lifecycle_status)

    arho_line_trg_line_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_plan_regulation_update_lifecycle_status",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_line_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(arho_line_trg_line_plan_regulation_update_lifecycle_status)

    arho_line_trg_line_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_plan_proposition_update_lifecycle_status",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_line_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(arho_line_trg_line_plan_proposition_update_lifecycle_status)

    arho_plan_trg_other_area_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_area_update_lifecycle_status()",
    )
    op.create_entity(arho_plan_trg_other_area_update_lifecycle_status)

    arho_other_area_trg_other_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_plan_regulation_update_lifecycle_status",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_area_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        arho_other_area_trg_other_area_plan_regulation_update_lifecycle_status
    )

    arho_other_area_trg_other_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_plan_proposition_update_lifecycle_status",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_area_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        arho_other_area_trg_other_area_plan_proposition_update_lifecycle_status
    )

    arho_plan_trg_other_point_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_point_update_lifecycle_status()",
    )
    op.create_entity(arho_plan_trg_other_point_update_lifecycle_status)

    arho_other_point_trg_other_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_plan_regulation_update_lifecycle_status",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_point_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        arho_other_point_trg_other_point_plan_regulation_update_lifecycle_status
    )

    arho_other_point_trg_other_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_plan_proposition_update_lifecycle_status",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_point_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        arho_other_point_trg_other_point_plan_proposition_update_lifecycle_status
    )

    arho_plan_trg_plan_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_plan_regulation_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(arho_plan_trg_plan_plan_regulation_update_lifecycle_status)

    arho_plan_trg_plan_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_plan_proposition_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(arho_plan_trg_plan_plan_proposition_update_lifecycle_status)

    arho_land_use_area_trg_land_use_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_new_lifecycle_status",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_land_use_area_new_lifecycle_status()",
    )
    op.create_entity(arho_land_use_area_trg_land_use_area_new_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_land_use_area_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status
    )

    arho_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_land_use_area_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status
    )

    arho_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_land_use_point_new_lifecycle_status()",
    )
    op.create_entity(arho_land_use_point_trg_land_use_point_new_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_land_use_point_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status
    )

    arho_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_land_use_point_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status
    )

    arho_line_trg_line_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_new_lifecycle_status",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_line_new_lifecycle_status()",
    )
    op.create_entity(arho_line_trg_line_new_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_line_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_line_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_line_new_lifecycle_status()",
    )
    op.create_entity(arho_plan_regulation_trg_plan_regulation_line_new_lifecycle_status)

    arho_plan_proposition_trg_plan_proposition_line_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_line_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_line_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_proposition_trg_plan_proposition_line_new_lifecycle_status
    )

    arho_other_area_trg_other_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_new_lifecycle_status",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_other_area_new_lifecycle_status()",
    )
    op.create_entity(arho_other_area_trg_other_area_new_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_other_area_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_other_area_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status
    )

    arho_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_other_area_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_other_area_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status
    )

    arho_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_other_point_new_lifecycle_status()",
    )
    op.create_entity(arho_other_point_trg_other_point_new_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_other_point_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_other_point_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status
    )

    arho_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_other_point_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_other_point_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status
    )

    arho_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_plan_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_plan_new_lifecycle_status()",
    )
    op.create_entity(arho_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status)

    arho_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_plan_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_plan_new_lifecycle_status()",
    )
    op.create_entity(
        arho_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status
    )

    arho_land_use_area_trg_land_use_area_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_add_plan_id_fkey",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(arho_land_use_area_trg_land_use_area_add_plan_id_fkey)

    arho_land_use_point_trg_land_use_point_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_add_plan_id_fkey",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(arho_land_use_point_trg_land_use_point_add_plan_id_fkey)

    arho_line_trg_line_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_line_add_plan_id_fkey",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(arho_line_trg_line_add_plan_id_fkey)

    arho_other_area_trg_other_area_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_other_area_add_plan_id_fkey",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(arho_other_area_trg_other_area_add_plan_id_fkey)

    arho_other_point_trg_other_point_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_other_point_add_plan_id_fkey",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(arho_other_point_trg_other_point_add_plan_id_fkey)

    arho_land_use_area_trg_land_use_area_validate_polygon_geometry = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_validate_polygon_geometry",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_validate_polygon_geometry()",
    )
    op.create_entity(arho_land_use_area_trg_land_use_area_validate_polygon_geometry)

    arho_other_area_trg_other_area_validate_polygon_geometry = PGTrigger(
        schema="arho",
        signature="trg_other_area_validate_polygon_geometry",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_validate_polygon_geometry()",
    )
    op.create_entity(arho_other_area_trg_other_area_validate_polygon_geometry)

    arho_plan_trg_plan_validate_polygon_geometry = PGTrigger(
        schema="arho",
        signature="trg_plan_validate_polygon_geometry",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_validate_polygon_geometry()",
    )
    op.create_entity(arho_plan_trg_plan_validate_polygon_geometry)

    arho_line_trg_line_validate_geometry = PGTrigger(
        schema="arho",
        signature="trg_line_validate_geometry",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON line\n    FOR EACH ROW\n    EXECUTE FUNCTION arho.trgfunc_line_validate_geometry()",
    )
    op.create_entity(arho_line_trg_line_validate_geometry)

    arho_other_area_trg_other_area_insert_intersecting_geometries = PGTrigger(
        schema="arho",
        signature="trg_other_area_insert_intersecting_geometries",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n    FOR EACH ROW\n    EXECUTE FUNCTION arho.trgfunc_other_area_insert_intersecting_geometries()",
    )
    op.create_entity(arho_other_area_trg_other_area_insert_intersecting_geometries)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    arho_other_area_trg_other_area_insert_intersecting_geometries = PGTrigger(
        schema="arho",
        signature="trg_other_area_insert_intersecting_geometries",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n    FOR EACH ROW\n    EXECUTE FUNCTION arho.trgfunc_other_area_insert_intersecting_geometries()",
    )
    op.drop_entity(arho_other_area_trg_other_area_insert_intersecting_geometries)

    arho_line_trg_line_validate_geometry = PGTrigger(
        schema="arho",
        signature="trg_line_validate_geometry",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON line\n    FOR EACH ROW\n    EXECUTE FUNCTION arho.trgfunc_line_validate_geometry()",
    )
    op.drop_entity(arho_line_trg_line_validate_geometry)

    arho_plan_trg_plan_validate_polygon_geometry = PGTrigger(
        schema="arho",
        signature="trg_plan_validate_polygon_geometry",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_validate_polygon_geometry()",
    )
    op.drop_entity(arho_plan_trg_plan_validate_polygon_geometry)

    arho_other_area_trg_other_area_validate_polygon_geometry = PGTrigger(
        schema="arho",
        signature="trg_other_area_validate_polygon_geometry",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_validate_polygon_geometry()",
    )
    op.drop_entity(arho_other_area_trg_other_area_validate_polygon_geometry)

    arho_land_use_area_trg_land_use_area_validate_polygon_geometry = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_validate_polygon_geometry",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_validate_polygon_geometry()",
    )
    op.drop_entity(arho_land_use_area_trg_land_use_area_validate_polygon_geometry)

    arho_other_point_trg_other_point_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_other_point_add_plan_id_fkey",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(arho_other_point_trg_other_point_add_plan_id_fkey)

    arho_other_area_trg_other_area_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_other_area_add_plan_id_fkey",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(arho_other_area_trg_other_area_add_plan_id_fkey)

    arho_line_trg_line_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_line_add_plan_id_fkey",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(arho_line_trg_line_add_plan_id_fkey)

    arho_land_use_point_trg_land_use_point_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_add_plan_id_fkey",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(arho_land_use_point_trg_land_use_point_add_plan_id_fkey)

    arho_land_use_area_trg_land_use_area_add_plan_id_fkey = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_add_plan_id_fkey",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(arho_land_use_area_trg_land_use_area_add_plan_id_fkey)

    arho_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_plan_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_plan_new_lifecycle_status()",
    )
    op.drop_entity(arho_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_plan_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_plan_new_lifecycle_status()",
    )
    op.drop_entity(arho_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status)

    arho_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_other_point_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_other_point_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status
    )

    arho_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_other_point_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_other_point_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status
    )

    arho_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_other_point_new_lifecycle_status()",
    )
    op.drop_entity(arho_other_point_trg_other_point_new_lifecycle_status)

    arho_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_other_area_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_other_area_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status
    )

    arho_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_other_area_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_other_area_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status
    )

    arho_other_area_trg_other_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_new_lifecycle_status",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_other_area_new_lifecycle_status()",
    )
    op.drop_entity(arho_other_area_trg_other_area_new_lifecycle_status)

    arho_plan_proposition_trg_plan_proposition_line_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_line_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_line_new_lifecycle_status()",
    )
    op.drop_entity(arho_plan_proposition_trg_plan_proposition_line_new_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_line_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_line_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_line_new_lifecycle_status()",
    )
    op.drop_entity(arho_plan_regulation_trg_plan_regulation_line_new_lifecycle_status)

    arho_line_trg_line_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_new_lifecycle_status",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_line_new_lifecycle_status()",
    )
    op.drop_entity(arho_line_trg_line_new_lifecycle_status)

    arho_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_land_use_point_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status
    )

    arho_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_land_use_point_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status
    )

    arho_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_land_use_point_new_lifecycle_status()",
    )
    op.drop_entity(arho_land_use_point_trg_land_use_point_new_lifecycle_status)

    arho_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_land_use_area_new_lifecycle_status",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status
    )

    arho_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_land_use_area_new_lifecycle_status",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON arho.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION arho.trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
    )
    op.drop_entity(
        arho_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status
    )

    arho_land_use_area_trg_land_use_area_new_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_new_lifecycle_status",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION arho.trgfunc_land_use_area_new_lifecycle_status()",
    )
    op.drop_entity(arho_land_use_area_trg_land_use_area_new_lifecycle_status)

    arho_plan_trg_plan_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_plan_proposition_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(arho_plan_trg_plan_plan_proposition_update_lifecycle_status)

    arho_plan_trg_plan_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_plan_plan_regulation_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(arho_plan_trg_plan_plan_regulation_update_lifecycle_status)

    arho_other_point_trg_other_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_plan_proposition_update_lifecycle_status",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_point_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_other_point_trg_other_point_plan_proposition_update_lifecycle_status
    )

    arho_other_point_trg_other_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_plan_regulation_update_lifecycle_status",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_point_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_other_point_trg_other_point_plan_regulation_update_lifecycle_status
    )

    arho_plan_trg_other_point_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_point_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_point_update_lifecycle_status()",
    )
    op.drop_entity(arho_plan_trg_other_point_update_lifecycle_status)

    arho_other_area_trg_other_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_plan_proposition_update_lifecycle_status",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_area_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_other_area_trg_other_area_plan_proposition_update_lifecycle_status
    )

    arho_other_area_trg_other_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_plan_regulation_update_lifecycle_status",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_other_area_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_other_area_trg_other_area_plan_regulation_update_lifecycle_status
    )

    arho_plan_trg_other_area_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_other_area_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_area_update_lifecycle_status()",
    )
    op.drop_entity(arho_plan_trg_other_area_update_lifecycle_status)

    arho_line_trg_line_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_plan_proposition_update_lifecycle_status",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_line_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(arho_line_trg_line_plan_proposition_update_lifecycle_status)

    arho_line_trg_line_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_plan_regulation_update_lifecycle_status",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_line_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(arho_line_trg_line_plan_regulation_update_lifecycle_status)

    arho_plan_trg_line_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_line_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_line_update_lifecycle_status()",
    )
    op.drop_entity(arho_plan_trg_line_update_lifecycle_status)

    arho_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_plan_proposition_update_lifecycle_status",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status
    )

    arho_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_plan_regulation_update_lifecycle_status",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status
    )

    arho_plan_trg_land_use_point_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_point_update_lifecycle_status()",
    )
    op.drop_entity(arho_plan_trg_land_use_point_update_lifecycle_status)

    arho_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_plan_proposition_update_lifecycle_status",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status
    )

    arho_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_plan_regulation_update_lifecycle_status",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON arho.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION arho.trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        arho_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status
    )

    arho_plan_trg_land_use_area_update_lifecycle_status = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_update_lifecycle_status",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_area_update_lifecycle_status()",
    )
    op.drop_entity(arho_plan_trg_land_use_area_update_lifecycle_status)

    arho_plan_regulation_trg_plan_regulation_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_new_lifecycle_date",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_regulation\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_regulation_new_lifecycle_date()",
    )
    op.drop_entity(arho_plan_regulation_trg_plan_regulation_new_lifecycle_date)

    arho_plan_proposition_trg_plan_proposition_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_new_lifecycle_date",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_proposition\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_proposition_new_lifecycle_date()",
    )
    op.drop_entity(arho_plan_proposition_trg_plan_proposition_new_lifecycle_date)

    arho_plan_trg_plan_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_plan_new_lifecycle_date",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_plan_new_lifecycle_date()",
    )
    op.drop_entity(arho_plan_trg_plan_new_lifecycle_date)

    arho_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_point_new_lifecycle_date()",
    )
    op.drop_entity(arho_other_point_trg_other_point_new_lifecycle_date)

    arho_other_area_trg_other_area_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_other_area_new_lifecycle_date",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_other_area_new_lifecycle_date()",
    )
    op.drop_entity(arho_other_area_trg_other_area_new_lifecycle_date)

    arho_line_trg_line_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_line_new_lifecycle_date",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON line\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_line_new_lifecycle_date()",
    )
    op.drop_entity(arho_line_trg_line_new_lifecycle_date)

    arho_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_point_new_lifecycle_date()",
    )
    op.drop_entity(arho_land_use_point_trg_land_use_point_new_lifecycle_date)

    arho_land_use_area_trg_land_use_area_new_lifecycle_date = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_new_lifecycle_date",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION arho.trgfunc_land_use_area_new_lifecycle_date()",
    )
    op.drop_entity(arho_land_use_area_trg_land_use_area_new_lifecycle_date)

    arho_source_data_trg_source_data_modified_at = PGTrigger(
        schema="arho",
        signature="trg_source_data_modified_at",
        on_entity="arho.source_data",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON source_data\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_source_data_trg_source_data_modified_at)

    arho_plan_regulation_group_trg_plan_regulation_group_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_group_modified_at",
        on_entity="arho.plan_regulation_group",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation_group\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_plan_regulation_group_trg_plan_regulation_group_modified_at)

    arho_plan_regulation_trg_plan_regulation_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_regulation_modified_at",
        on_entity="arho.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_regulation\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_plan_regulation_trg_plan_regulation_modified_at)

    arho_plan_proposition_trg_plan_proposition_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_proposition_modified_at",
        on_entity="arho.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan_proposition\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_plan_proposition_trg_plan_proposition_modified_at)

    arho_plan_trg_plan_modified_at = PGTrigger(
        schema="arho",
        signature="trg_plan_modified_at",
        on_entity="arho.plan",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_plan_trg_plan_modified_at)

    arho_other_point_trg_other_point_modified_at = PGTrigger(
        schema="arho",
        signature="trg_other_point_modified_at",
        on_entity="arho.other_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_other_point_trg_other_point_modified_at)

    arho_other_area_trg_other_area_modified_at = PGTrigger(
        schema="arho",
        signature="trg_other_area_modified_at",
        on_entity="arho.other_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_other_area_trg_other_area_modified_at)

    arho_organisation_trg_organisation_modified_at = PGTrigger(
        schema="arho",
        signature="trg_organisation_modified_at",
        on_entity="arho.organisation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON organisation\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_organisation_trg_organisation_modified_at)

    arho_line_trg_line_modified_at = PGTrigger(
        schema="arho",
        signature="trg_line_modified_at",
        on_entity="arho.line",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_line_trg_line_modified_at)

    arho_lifecycle_date_trg_lifecycle_date_modified_at = PGTrigger(
        schema="arho",
        signature="trg_lifecycle_date_modified_at",
        on_entity="arho.lifecycle_date",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON lifecycle_date\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_lifecycle_date_trg_lifecycle_date_modified_at)

    arho_land_use_point_trg_land_use_point_modified_at = PGTrigger(
        schema="arho",
        signature="trg_land_use_point_modified_at",
        on_entity="arho.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_land_use_point_trg_land_use_point_modified_at)

    arho_land_use_area_trg_land_use_area_modified_at = PGTrigger(
        schema="arho",
        signature="trg_land_use_area_modified_at",
        on_entity="arho.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_land_use_area_trg_land_use_area_modified_at)

    arho_document_trg_document_modified_at = PGTrigger(
        schema="arho",
        signature="trg_document_modified_at",
        on_entity="arho.document",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON document\n        FOR EACH ROW\n        EXECUTE FUNCTION arho.trgfunc_modified_at()",
    )
    op.drop_entity(arho_document_trg_document_modified_at)

    arho_trgfunc_other_area_insert_intersecting_geometries = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_insert_intersecting_geometries()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        -- Check if the new entry has id of a plan_regulation_group\n        -- which has id of a plan_regulation that has intended_use_id\n        -- that equals to 'paakayttotarkoitus'\n        IF EXISTS (\n            SELECT 1\n            FROM arho.plan_regulation_group prg\n            JOIN arho.plan_regulation pr ON pr.plan_regulation_group_id = prg.id\n            JOIN codes.type_of_additional_information tai ON tai.id = pr.intended_use_id\n            WHERE tai.value = 'paakayttotarkoitus'\n            AND prg.id = NEW.plan_regulation_group_id\n        ) THEN\n            -- check if there already is an entry in other_area table with the same\n            -- plan_regulation_group that the new geometry intersects\n            IF EXISTS (\n                SELECT 1\n                FROM arho.other_area oa\n                WHERE oa.plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND ST_Intersects(oa.geom, NEW.geom)\n            ) THEN\n                RAISE EXCEPTION 'New entry intersects with existing entry, both with\n                intended_use of paakayttotarkoitus';\n            END IF;\n        END IF;\n\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_area_insert_intersecting_geometries)

    arho_trgfunc_line_validate_geometry = PGFunction(
        schema="arho",
        signature="trgfunc_line_validate_geometry()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        IF NOT ST_IsSimple(NEW.geom) THEN\n            RAISE EXCEPTION 'Invalid geometry. Must not intersect itself.';\n        END IF;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_line_validate_geometry)

    arho_trgfunc_validate_polygon_geometry = PGFunction(
        schema="arho",
        signature="trgfunc_validate_polygon_geometry()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        IF NOT ST_IsValid(NEW.geom) THEN\n            RAISE EXCEPTION 'Invalid geometry. Must follow OGC rules.';\n        END IF;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_validate_polygon_geometry)

    arho_trgfunc_add_plan_id_fkey = PGFunction(
        schema="arho",
        signature="trgfunc_add_plan_id_fkey()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        -- Get the most recent plan whose geometry contains the plan object\n        NEW.plan_id := (\n            SELECT id\n            FROM arho.plan\n            WHERE ST_Contains(geom, NEW.geom)\n            ORDER BY created_at DESC\n            LIMIT 1\n        );\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_add_plan_id_fkey)

    arho_trgfunc_plan_proposition_plan_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM arho.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_proposition_plan_new_lifecycle_status)

    arho_trgfunc_plan_regulation_plan_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM arho.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_regulation_plan_new_lifecycle_status)

    arho_trgfunc_plan_proposition_other_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_proposition_other_point_new_lifecycle_status)

    arho_trgfunc_plan_regulation_other_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_regulation_other_point_new_lifecycle_status)

    arho_trgfunc_other_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_point_new_lifecycle_status)

    arho_trgfunc_plan_proposition_other_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_proposition_other_area_new_lifecycle_status)

    arho_trgfunc_plan_regulation_other_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_regulation_other_area_new_lifecycle_status)

    arho_trgfunc_other_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_area_new_lifecycle_status)

    arho_trgfunc_plan_proposition_line_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_proposition_line_new_lifecycle_status)

    arho_trgfunc_plan_regulation_line_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_regulation_line_new_lifecycle_status)

    arho_trgfunc_line_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_line_new_lifecycle_status)

    arho_trgfunc_plan_proposition_land_use_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_proposition_land_use_point_new_lifecycle_status)

    arho_trgfunc_plan_regulation_land_use_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_regulation_land_use_point_new_lifecycle_status)

    arho_trgfunc_land_use_point_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_point_new_lifecycle_status)

    arho_trgfunc_plan_proposition_land_use_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_proposition_land_use_area_new_lifecycle_status)

    arho_trgfunc_plan_regulation_land_use_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM arho.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_regulation_land_use_area_new_lifecycle_status)

    arho_trgfunc_land_use_area_new_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM arho.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_area_new_lifecycle_status)

    arho_trgfunc_plan_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_plan_proposition_update_lifecycle_status)

    arho_trgfunc_plan_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_plan_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_plan_regulation_update_lifecycle_status)

    arho_trgfunc_other_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_point_plan_proposition_update_lifecycle_status)

    arho_trgfunc_other_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_point_plan_regulation_update_lifecycle_status)

    arho_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_point_update_lifecycle_status)

    arho_trgfunc_other_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_area_plan_proposition_update_lifecycle_status)

    arho_trgfunc_other_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_area_plan_regulation_update_lifecycle_status)

    arho_trgfunc_other_area_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.other_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_area_update_lifecycle_status)

    arho_trgfunc_line_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_line_plan_proposition_update_lifecycle_status)

    arho_trgfunc_line_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_line_plan_regulation_update_lifecycle_status)

    arho_trgfunc_line_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_line_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.line\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_line_update_lifecycle_status)

    arho_trgfunc_land_use_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_point_plan_proposition_update_lifecycle_status)

    arho_trgfunc_land_use_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_point_plan_regulation_update_lifecycle_status)

    arho_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_point_update_lifecycle_status)

    arho_trgfunc_land_use_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_area_plan_proposition_update_lifecycle_status)

    arho_trgfunc_land_use_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE arho.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_area_plan_regulation_update_lifecycle_status)

    arho_trgfunc_land_use_area_update_lifecycle_status = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE arho.land_use_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_area_update_lifecycle_status)

    arho_trgfunc_plan_regulation_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_plan_regulation_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, plan_regulation_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_regulation_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_regulation_new_lifecycle_date)

    arho_trgfunc_plan_proposition_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_plan_proposition_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, plan_proposition_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_proposition_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_proposition_new_lifecycle_date)

    arho_trgfunc_plan_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_plan_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, plan_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_plan_new_lifecycle_date)

    arho_trgfunc_other_point_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_other_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, other_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_point_new_lifecycle_date)

    arho_trgfunc_other_area_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_other_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, other_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_other_area_new_lifecycle_date)

    arho_trgfunc_line_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_line_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, line_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE line_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_line_new_lifecycle_date)

    arho_trgfunc_land_use_point_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_point_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, land_use_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_point_new_lifecycle_date)

    arho_trgfunc_land_use_area_new_lifecycle_date = PGFunction(
        schema="arho",
        signature="trgfunc_land_use_area_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            INSERT INTO arho.lifecycle_date\n                (lifecycle_status_id, land_use_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE arho.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_land_use_area_new_lifecycle_date)

    arho_trgfunc_modified_at = PGFunction(
        schema="arho",
        signature="trgfunc_modified_at()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.modified_at = CURRENT_TIMESTAMP;\n            return NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(arho_trgfunc_modified_at)

    # ### end Alembic commands ###
