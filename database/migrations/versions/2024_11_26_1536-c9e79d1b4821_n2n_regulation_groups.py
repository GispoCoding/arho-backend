"""n2n regulation groups

Revision ID: c9e79d1b4821
Revises: 9c28ba93d9be
Create Date: 2024-11-26 15:36:29.675037

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "c9e79d1b4821"
down_revision: Union[str, None] = "9c28ba93d9be"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_hame_land_use_area_plan_regulation_group_id",
        table_name="land_use_area",
        schema="hame",
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "land_use_area",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("land_use_area", "plan_regulation_group_id", schema="hame")
    op.drop_index(
        "ix_hame_land_use_point_plan_regulation_group_id",
        table_name="land_use_point",
        schema="hame",
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "land_use_point",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("land_use_point", "plan_regulation_group_id", schema="hame")
    op.drop_index(
        "ix_hame_line_plan_regulation_group_id",
        table_name="line",
        schema="hame",
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "line",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("line", "plan_regulation_group_id", schema="hame")
    op.drop_index(
        "ix_hame_other_area_plan_regulation_group_id",
        table_name="other_area",
        schema="hame",
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "other_area",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("other_area", "plan_regulation_group_id", schema="hame")
    op.drop_index(
        "ix_hame_other_point_plan_regulation_group_id",
        table_name="other_point",
        schema="hame",
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "other_point",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("other_point", "plan_regulation_group_id", schema="hame")
    op.add_column(
        "regulation_group_association",
        sa.Column("land_use_area_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )
    op.add_column(
        "regulation_group_association",
        sa.Column("other_area_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )
    op.add_column(
        "regulation_group_association",
        sa.Column("land_use_point_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )
    op.add_column(
        "regulation_group_association",
        sa.Column("line_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )
    op.add_column(
        "regulation_group_association",
        sa.Column("other_point_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_land_use_area_id"),
        "regulation_group_association",
        ["land_use_area_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_land_use_point_id"),
        "regulation_group_association",
        ["land_use_point_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_line_id"),
        "regulation_group_association",
        ["line_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_other_area_id"),
        "regulation_group_association",
        ["other_area_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_other_point_id"),
        "regulation_group_association",
        ["other_point_id"],
        unique=False,
        schema="hame",
    )
    op.create_foreign_key(
        "other_point_id_fkey",
        "regulation_group_association",
        "other_point",
        ["other_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "other_area_id_fkey",
        "regulation_group_association",
        "other_area",
        ["other_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "land_use_point_id_fkey",
        "regulation_group_association",
        "land_use_point",
        ["land_use_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "land_use_area_id_fkey",
        "regulation_group_association",
        "land_use_area",
        ["land_use_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "line_id_fkey",
        "regulation_group_association",
        "line",
        ["line_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "line_id_fkey",
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "land_use_area_id_fkey",
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "land_use_point_id_fkey",
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "other_area_id_fkey",
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "other_point_id_fkey",
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_other_point_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_other_area_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_line_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_land_use_point_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_land_use_area_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_column("regulation_group_association", "other_point_id", schema="hame")
    op.drop_column("regulation_group_association", "line_id", schema="hame")
    op.drop_column("regulation_group_association", "land_use_point_id", schema="hame")
    op.drop_column("regulation_group_association", "other_area_id", schema="hame")
    op.drop_column("regulation_group_association", "land_use_area_id", schema="hame")
    op.add_column(
        "other_point",
        sa.Column(
            "plan_regulation_group_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "other_point",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_index(
        "ix_hame_other_point_plan_regulation_group_id",
        "other_point",
        ["plan_regulation_group_id"],
        unique=False,
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column(
            "plan_regulation_group_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "other_area",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_index(
        "ix_hame_other_area_plan_regulation_group_id",
        "other_area",
        ["plan_regulation_group_id"],
        unique=False,
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column(
            "plan_regulation_group_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "line",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_index(
        "ix_hame_line_plan_regulation_group_id",
        "line",
        ["plan_regulation_group_id"],
        unique=False,
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column(
            "plan_regulation_group_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "land_use_point",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_index(
        "ix_hame_land_use_point_plan_regulation_group_id",
        "land_use_point",
        ["plan_regulation_group_id"],
        unique=False,
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column(
            "plan_regulation_group_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "land_use_area",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_index(
        "ix_hame_land_use_area_plan_regulation_group_id",
        "land_use_area",
        ["plan_regulation_group_id"],
        unique=False,
        schema="hame",
    )
    # ### end Alembic commands ###
