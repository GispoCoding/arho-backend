"""add separate fields for intended use allocations

Revision ID: 0d4bf02462e9
Revises: b8d3238d6b0a
Create Date: 2024-09-13 16:03:47.595496

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0d4bf02462e9"
down_revision: Union[str, None] = "b8d3238d6b0a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan_regulation",
        sa.Column(
            "intended_use_allocation_or_exclusion_id",
            sa.UUID(as_uuid=False),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "first_intended_use_allocation_id",
            sa.UUID(as_uuid=False),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "second_intended_use_allocation_id",
            sa.UUID(as_uuid=False),
            nullable=True,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "intended_use_allocation_or_exclusion_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["intended_use_allocation_or_exclusion_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "second_intended_use_allocation_id_fkey",
        "plan_regulation",
        "type_of_plan_regulation",
        ["second_intended_use_allocation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "first_intended_use_allocation_id_fkey",
        "plan_regulation",
        "type_of_plan_regulation",
        ["first_intended_use_allocation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "first_intended_use_allocation_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "second_intended_use_allocation_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "intended_use_allocation_or_exclusion_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column(
        "plan_regulation", "second_intended_use_allocation_id", schema="hame"
    )
    op.drop_column("plan_regulation", "first_intended_use_allocation_id", schema="hame")
    op.drop_column(
        "plan_regulation",
        "intended_use_allocation_or_exclusion_id",
        schema="hame",
    )
    # ### end Alembic commands ###
