"""update update and new lifecycle status triggers

Revision ID: fb598db5b47a
Revises: 759353efdfdb
Create Date: 2024-06-19 16:06:02.636223

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "fb598db5b47a"
down_revision: Union[str, None] = "759353efdfdb"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgfunc_land_use_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.land_use_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.replace_entity(hame_trgfunc_land_use_area_update_lifecycle_status)

    hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status)

    hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(
        hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status
    )

    hame_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.replace_entity(hame_trgfunc_land_use_point_update_lifecycle_status)

    hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(
        hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status
    )

    hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(
        hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status
    )

    hame_trgfunc_line_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.line\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.replace_entity(hame_trgfunc_line_update_lifecycle_status)

    hame_trgfunc_line_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_line_plan_regulation_update_lifecycle_status)

    hame_trgfunc_line_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_line_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.other_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.replace_entity(hame_trgfunc_other_area_update_lifecycle_status)

    hame_trgfunc_other_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_area_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_area_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.replace_entity(hame_trgfunc_other_point_update_lifecycle_status)

    hame_trgfunc_other_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_point_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_point_plan_proposition_update_lifecycle_status)

    hame_trgfunc_plan_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_plan_regulation_update_lifecycle_status)

    hame_trgfunc_plan_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_plan_proposition_update_lifecycle_status)

    hame_trgfunc_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_land_use_area_new_lifecycle_status)

    hame_trgfunc_plan_regulation_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_land_use_area_new_lifecycle_status)

    hame_trgfunc_plan_proposition_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_land_use_area_new_lifecycle_status)

    hame_trgfunc_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_land_use_point_new_lifecycle_status)

    hame_trgfunc_plan_regulation_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_land_use_point_new_lifecycle_status)

    hame_trgfunc_plan_proposition_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_land_use_point_new_lifecycle_status)

    hame_trgfunc_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_line_new_lifecycle_status)

    hame_trgfunc_plan_regulation_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_line_new_lifecycle_status)

    hame_trgfunc_plan_proposition_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_line_new_lifecycle_status)

    hame_trgfunc_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_area_new_lifecycle_status)

    hame_trgfunc_plan_regulation_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_other_area_new_lifecycle_status)

    hame_trgfunc_plan_proposition_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_other_area_new_lifecycle_status)

    hame_trgfunc_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_other_point_new_lifecycle_status)

    hame_trgfunc_plan_regulation_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_other_point_new_lifecycle_status)

    hame_trgfunc_plan_proposition_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_other_point_new_lifecycle_status)

    hame_trgfunc_plan_regulation_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM hame.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_plan_new_lifecycle_status)

    hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status
    )

    hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status
    )

    hame_line_trg_line_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_regulation_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_line_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(hame_line_trg_line_plan_regulation_update_lifecycle_status)

    hame_line_trg_line_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_proposition_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_line_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(hame_line_trg_line_plan_proposition_update_lifecycle_status)

    hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_area_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status
    )

    hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_area_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status
    )

    hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_point_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status
    )

    hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_point_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status
    )

    hame_plan_trg_plan_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_plan_regulation_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_plan_plan_regulation_update_lifecycle_status)

    hame_plan_trg_plan_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_plan_proposition_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_plan_plan_proposition_update_lifecycle_status)

    hame_land_use_area_trg_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_land_use_area_new_lifecycle_status()",
    )
    op.create_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_land_use_area_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status
    )

    hame_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_land_use_area_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_land_use_point_new_lifecycle_status()",
    )
    op.create_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_land_use_point_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status
    )

    hame_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_land_use_point_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status
    )

    hame_line_trg_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_line_new_lifecycle_status()",
    )
    op.create_entity(hame_line_trg_line_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_line_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_line_new_lifecycle_status()",
    )
    op.create_entity(hame_plan_regulation_trg_plan_regulation_line_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_line_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_line_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_proposition_trg_plan_proposition_line_new_lifecycle_status
    )

    hame_other_area_trg_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_other_area_new_lifecycle_status()",
    )
    op.create_entity(hame_other_area_trg_other_area_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_other_area_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_other_area_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status
    )

    hame_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_other_area_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_other_area_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status
    )

    hame_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_other_point_new_lifecycle_status()",
    )
    op.create_entity(hame_other_point_trg_other_point_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_other_point_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_other_point_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status
    )

    hame_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_other_point_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_other_point_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status
    )

    hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_plan_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_plan_new_lifecycle_status()",
    )
    op.create_entity(hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status)

    hame_plan_trg_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_plan_proposition_update_lifecycle_status)

    hame_plan_trg_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_plan_regulation_update_lifecycle_status)

    hame_trgfunc_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_update_lifecycle_status)

    hame_trgfunc_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_update_lifecycle_status)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgfunc_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_plan_regulation_update_lifecycle_status)

    hame_trgfunc_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_plan_proposition_update_lifecycle_status)

    hame_plan_trg_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_plan_regulation_update_lifecycle_status)

    hame_plan_trg_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_plan_proposition_update_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_plan_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_plan_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_other_point_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_other_point_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_proposition_trg_plan_proposition_other_point_new_lifecycle_status
    )

    hame_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_other_point_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_other_point_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_regulation_trg_plan_regulation_other_point_new_lifecycle_status
    )

    hame_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_other_point_new_lifecycle_status()",
    )
    op.drop_entity(hame_other_point_trg_other_point_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_other_area_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_other_area_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_proposition_trg_plan_proposition_other_area_new_lifecycle_status
    )

    hame_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_other_area_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_other_area_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_regulation_trg_plan_regulation_other_area_new_lifecycle_status
    )

    hame_other_area_trg_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_other_area_new_lifecycle_status()",
    )
    op.drop_entity(hame_other_area_trg_other_area_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_line_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_line_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_proposition_trg_plan_proposition_line_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_line_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_line_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_regulation_trg_plan_regulation_line_new_lifecycle_status)

    hame_line_trg_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_line_new_lifecycle_status()",
    )
    op.drop_entity(hame_line_trg_line_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_land_use_point_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_proposition_trg_plan_proposition_land_use_point_new_lifecycle_status
    )

    hame_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_land_use_point_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_regulation_trg_plan_regulation_land_use_point_new_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_land_use_point_new_lifecycle_status()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_land_use_area_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_proposition_trg_plan_proposition_land_use_area_new_lifecycle_status
    )

    hame_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_land_use_area_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
    )
    op.drop_entity(
        hame_plan_regulation_trg_plan_regulation_land_use_area_new_lifecycle_status
    )

    hame_land_use_area_trg_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_land_use_area_new_lifecycle_status()",
    )
    op.drop_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_status)

    hame_plan_trg_plan_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_plan_proposition_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_plan_plan_proposition_update_lifecycle_status)

    hame_plan_trg_plan_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_plan_regulation_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_plan_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_plan_plan_regulation_update_lifecycle_status)

    hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_point_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status
    )

    hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_point_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status
    )

    hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_area_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status
    )

    hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_other_area_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status
    )

    hame_line_trg_line_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_proposition_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_line_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(hame_line_trg_line_plan_proposition_update_lifecycle_status)

    hame_line_trg_line_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_regulation_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_line_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(hame_line_trg_line_plan_regulation_update_lifecycle_status)

    hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status
    )

    hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status
    )

    hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area\n            FOR EACH ROW\n            WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n            EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status
    )

    hame_trgfunc_plan_regulation_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM hame.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_plan_new_lifecycle_status)

    hame_trgfunc_plan_proposition_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_other_point_new_lifecycle_status)

    hame_trgfunc_plan_regulation_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_other_point_new_lifecycle_status)

    hame_trgfunc_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_point_new_lifecycle_status)

    hame_trgfunc_plan_proposition_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_other_area_new_lifecycle_status)

    hame_trgfunc_plan_regulation_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.other_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_other_area_new_lifecycle_status)

    hame_trgfunc_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_area_new_lifecycle_status)

    hame_trgfunc_plan_proposition_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_line_new_lifecycle_status)

    hame_trgfunc_plan_regulation_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.line\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_line_new_lifecycle_status)

    hame_trgfunc_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_line_new_lifecycle_status)

    hame_trgfunc_plan_proposition_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_land_use_point_new_lifecycle_status)

    hame_trgfunc_plan_regulation_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_point\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_land_use_point_new_lifecycle_status)

    hame_trgfunc_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_point_new_lifecycle_status)

    hame_trgfunc_plan_proposition_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_land_use_area_new_lifecycle_status)

    hame_trgfunc_plan_regulation_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            DECLARE status_id UUID := (\n                SELECT lifecycle_status_id\n                FROM hame.land_use_area\n                WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n                LIMIT 1\n                );\n            BEGIN\n                IF status_id IS NOT NULL THEN\n                    NEW.lifecycle_status_id = status_id;\n                END IF;\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_land_use_area_new_lifecycle_status)

    hame_trgfunc_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_area_new_lifecycle_status)

    hame_trgfunc_plan_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_proposition\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_plan_proposition_update_lifecycle_status)

    hame_trgfunc_plan_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.plan_regulation\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_point_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_point_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.replace_entity(hame_trgfunc_other_point_update_lifecycle_status)
    hame_trgfunc_other_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_area_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_other_area_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.other_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.replace_entity(hame_trgfunc_other_area_update_lifecycle_status)
    hame_trgfunc_line_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_line_plan_proposition_update_lifecycle_status)

    hame_trgfunc_line_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_line_plan_regulation_update_lifecycle_status)

    hame_trgfunc_line_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.line\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.replace_entity(hame_trgfunc_line_update_lifecycle_status)
    hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status)

    hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status)

    hame_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.replace_entity(hame_trgfunc_land_use_point_update_lifecycle_status)
    hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status)

    hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status)

    hame_trgfunc_land_use_area_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.land_use_area\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.replace_entity(hame_trgfunc_land_use_area_update_lifecycle_status)
    # ### end Alembic commands ###
