"""add additional information fields to plan regulation

Revision ID: 749c61b91749
Revises: 0a8a2fecda2a
Create Date: 2024-03-19 17:20:20.385148

"""
from typing import Sequence, Union

# import geoalchemy2
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "749c61b91749"
down_revision: Union[str, None] = "0a8a2fecda2a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan_regulation",
        sa.Column("intended_use_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("existence_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "regulation_type_additional_information_id",
            sa.UUID(),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("significance_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("reservation_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("development_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("disturbance_prevention_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("construction_control_id", sa.UUID(), nullable=True),
        schema="hame",
    )
    op.create_foreign_key(
        "disturbance_prevention_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["disturbance_prevention_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "intended_use_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["intended_use_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "regulation_type_additional_information_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["regulation_type_additional_information_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "development_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["development_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "significance_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["significance_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "existence_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["existence_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "construction_control_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["construction_control_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "reservation_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["reservation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "reservation_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "construction_control_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "existence_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "significance_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "development_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "regulation_type_additional_information_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "intended_use_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "disturbance_prevention_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("plan_regulation", "construction_control_id", schema="hame")
    op.drop_column("plan_regulation", "disturbance_prevention_id", schema="hame")
    op.drop_column("plan_regulation", "development_id", schema="hame")
    op.drop_column("plan_regulation", "reservation_id", schema="hame")
    op.drop_column("plan_regulation", "significance_id", schema="hame")
    op.drop_column(
        "plan_regulation",
        "regulation_type_additional_information_id",
        schema="hame",
    )
    op.drop_column("plan_regulation", "existence_id", schema="hame")
    op.drop_column("plan_regulation", "intended_use_id", schema="hame")
    # ### end Alembic commands ###
