"""Add regulation aggregation functions

Revision ID: b5e256d780f5
Revises: a2baec3a78b6
Create Date: 2025-06-10 17:00:28.501271

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "b5e256d780f5"
down_revision: Union[str, None] = "a2baec3a78b6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_regulation_values = PGFunction(
        schema="hame",
        signature="regulation_values(table_name text, id uuid)",
        definition="RETURNS jsonb\n    LANGUAGE 'plpgsql'\n    COST 100\n    STABLE PARALLEL SAFE \nAS $BODY$\nDECLARE\n    return_value jsonb;\nBEGIN\n    EXECUTE format(\n        $SQL$\n        select\n            jsonb_object_agg(\n                tpr.value,\n                (\n                    select\n                        jsonb_strip_nulls(to_jsonb(ai_values))\n                    from\n                        (\n                            select\n                                r.numeric_value,\n                                r.unit,\n                                r.numeric_range_min,\n                                r.numeric_range_max,\n                                r.text_value,\n                                r.text_syntax,\n                                r.code_title,\n                                r.code_list,\n                                r.code_value\n                        ) as ai_values\n                )\n            )\n        from\n            hame.regulation_group_association rga\n            join hame.plan_regulation_group rg\n                on rga.plan_regulation_group_id = rg.id\n            join hame.plan_regulation r\n                on rg.id = r.plan_regulation_group_id\n            join codes.type_of_plan_regulation tpr\n                on r.type_of_plan_regulation_id = tpr.id\n        where\n            rga.%I = $1\n            AND r.value_data_type is not null\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$BODY$",
    )
    op.create_entity(hame_regulation_values)

    hame_primary_use_regulations = PGFunction(
        schema="hame",
        signature="primary_use_regulations(land_use_area_id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE sql\nAS\n$$\n    select\n        jsonb_object_agg(\n            tpr.value,\n            (\n                select\n                    json_object_agg(\n                        tai.value,\n                        (\n                            select\n                            jsonb_strip_nulls(to_jsonb(ai_values))\n                            from\n                                (\n                                select\n                                    ai.numeric_value,\n                                    ai.numeric_range_min,\n                                    ai.numeric_range_max,\n                                    ai.text_value,\n                                    ai.code_value\n                                ) as ai_values\n                        )\n                    ) as ai_json\n                from\n                    hame.additional_information ai\n                    join codes.type_of_additional_information tai\n                        on ai.type_additional_information_id = tai.id\n                where\n                    ai.plan_regulation_id = r.id\n                    AND tai.value != 'paakayttotarkoitus'\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.land_use_area_id = $1\n        AND EXISTS (  -- select only regulations that have paakayttotarkoitus additional information\n            select\n            from hame.additional_information ai\n            where\n            ai.plan_regulation_id = r.id\n            AND ai.type_additional_information_id = (\n                select id\n                from codes.type_of_additional_information\n                where value = 'paakayttotarkoitus')\n        )\n$$",
    )
    op.create_entity(hame_primary_use_regulations)

    hame_sub_area_regulations = PGFunction(
        schema="hame",
        signature="sub_area_regulations(other_area_id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE sql\nAS\n$$\n    select\n        json_object_agg(\n            tpr.value,\n            (\n                select\n                    json_object_agg(\n                        tai.value,\n                        (\n                            select\n                                jsonb_strip_nulls(to_jsonb(ai_values))\n                            from (\n                                select\n                                        ai.numeric_value,\n                                        ai.unit,\n                                        ai.numeric_range_min,\n                                        ai.numeric_range_max,\n                                        ai.text_value,\n                                        ai.text_syntax,\n                                        ai.code_title,\n                                        ai.code_list,\n                                        ai.code_value\n                            ) as ai_values\n                        )\n                    ) as ai_json\n                from\n                    hame.additional_information ai\n                    join codes.type_of_additional_information tai\n                        on ai.type_additional_information_id = tai.id\n                where\n                    ai.plan_regulation_id = r.id\n                    AND tai.value != 'osaAlue'\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.other_area_id = $1\n        AND EXISTS (  -- select only regulations that have osaAlue additional information\n            select\n            from hame.additional_information ai \n            where\n                ai.plan_regulation_id = r.id\n                AND ai.type_additional_information_id = (\n                    select id\n                    from codes.type_of_additional_information\n                    where value = 'osaAlue')\n        )\n$$",
    )
    op.create_entity(hame_sub_area_regulations)

    hame_type_regulations = PGFunction(
        schema="hame",
        signature="type_regulations(table_name text, id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE plpgsql\nAS\n$BODY$\nDECLARE\n    return_value jsonb;\nBEGIN\n    EXECUTE format(\n        $SQL$\n        select\n            json_object_agg(\n                tpr.value,\n                (\n                    select\n                        json_object_agg(\n                            tai.value,\n                            (\n                                select\n                                jsonb_strip_nulls(to_jsonb(ai_values))\n                                from\n                                    (\n                                    select\n                                        ai.numeric_value,\n                                        ai.unit,\n                                        ai.numeric_range_min,\n                                        ai.numeric_range_max,\n                                        ai.text_value,\n                                        ai.text_syntax,\n                                        ai.code_title,\n                                        ai.code_list,\n                                        ai.code_value\n                                    ) as ai_values\n                            )\n                        ) as ai_json\n                    from\n                        hame.additional_information ai\n                        join codes.type_of_additional_information tai\n                            on ai.type_additional_information_id = tai.id\n                    where\n                        ai.plan_regulation_id = r.id\n                )\n            )\n        from\n            hame.regulation_group_association rga\n            join hame.plan_regulation_group rg\n                on rga.plan_regulation_group_id = rg.id\n            join hame.plan_regulation r\n                on rg.id = r.plan_regulation_group_id\n            join codes.type_of_plan_regulation tpr\n                on r.type_of_plan_regulation_id = tpr.id\n        where\n            rga.%I = $1\n            AND r.value_data_type is null\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$BODY$",
    )
    op.create_entity(hame_type_regulations)

    hame_short_names = PGFunction(
        schema="hame",
        signature="short_names(table_name text, id uuid)",
        definition="RETURNS text[]\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE plpgsql\nAS\n$BODY$\nDECLARE\n    return_value text[];\nBEGIN\n    EXECUTE format(\n        $SQL$\n        SELECT array(\n            SELECT rg.short_name\n            FROM\n                hame.regulation_group_association rga\n                join hame.plan_regulation_group rg\n                    on rga.plan_regulation_group_id = rg.id\n            WHERE\n                rga.%I = $1\n                AND rg.short_name is not null\n        )\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$BODY$",
    )
    op.create_entity(hame_short_names)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_short_names = PGFunction(
        schema="hame",
        signature="short_names(table_name text, id uuid)",
        definition="RETURNS text[]\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE plpgsql\nAS\n$BODY$\nDECLARE\n    return_value text[];\nBEGIN\n    EXECUTE format(\n        $SQL$\n        SELECT array(\n            SELECT rg.short_name\n            FROM\n                hame.regulation_group_association rga\n                join hame.plan_regulation_group rg\n                    on rga.plan_regulation_group_id = rg.id\n            WHERE\n                rga.%I = $1\n                AND rg.short_name is not null\n        )\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$BODY$",
    )
    op.drop_entity(hame_short_names)

    hame_type_regulations = PGFunction(
        schema="hame",
        signature="type_regulations(table_name text, id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE plpgsql\nAS\n$BODY$\nDECLARE\n    return_value jsonb;\nBEGIN\n    EXECUTE format(\n        $SQL$\n        select\n            json_object_agg(\n                tpr.value,\n                (\n                    select\n                        json_object_agg(\n                            tai.value,\n                            (\n                                select\n                                jsonb_strip_nulls(to_jsonb(ai_values))\n                                from\n                                    (\n                                    select\n                                        ai.numeric_value,\n                                        ai.unit,\n                                        ai.numeric_range_min,\n                                        ai.numeric_range_max,\n                                        ai.text_value,\n                                        ai.text_syntax,\n                                        ai.code_title,\n                                        ai.code_list,\n                                        ai.code_value\n                                    ) as ai_values\n                            )\n                        ) as ai_json\n                    from\n                        hame.additional_information ai\n                        join codes.type_of_additional_information tai\n                            on ai.type_additional_information_id = tai.id\n                    where\n                        ai.plan_regulation_id = r.id\n                )\n            )\n        from\n            hame.regulation_group_association rga\n            join hame.plan_regulation_group rg\n                on rga.plan_regulation_group_id = rg.id\n            join hame.plan_regulation r\n                on rg.id = r.plan_regulation_group_id\n            join codes.type_of_plan_regulation tpr\n                on r.type_of_plan_regulation_id = tpr.id\n        where\n            rga.%I = $1\n            AND r.value_data_type is null\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$BODY$",
    )
    op.drop_entity(hame_type_regulations)

    hame_sub_area_regulations = PGFunction(
        schema="hame",
        signature="sub_area_regulations(other_area_id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE sql\nAS\n$$\n    select\n        json_object_agg(\n            tpr.value,\n            (\n                select\n                    json_object_agg(\n                        tai.value,\n                        (\n                            select\n                                jsonb_strip_nulls(to_jsonb(ai_values))\n                            from (\n                                select\n                                        ai.numeric_value,\n                                        ai.unit,\n                                        ai.numeric_range_min,\n                                        ai.numeric_range_max,\n                                        ai.text_value,\n                                        ai.text_syntax,\n                                        ai.code_title,\n                                        ai.code_list,\n                                        ai.code_value\n                            ) as ai_values\n                        )\n                    ) as ai_json\n                from\n                    hame.additional_information ai\n                    join codes.type_of_additional_information tai\n                        on ai.type_additional_information_id = tai.id\n                where\n                    ai.plan_regulation_id = r.id\n                    AND tai.value != 'osaAlue'\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.other_area_id = $1\n        AND EXISTS (  -- select only regulations that have osaAlue additional information\n            select\n            from hame.additional_information ai \n            where\n                ai.plan_regulation_id = r.id\n                AND ai.type_additional_information_id = (\n                    select id\n                    from codes.type_of_additional_information\n                    where value = 'osaAlue')\n        )\n$$",
    )
    op.drop_entity(hame_sub_area_regulations)

    hame_primary_use_regulations = PGFunction(
        schema="hame",
        signature="primary_use_regulations(land_use_area_id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE sql\nAS\n$$\n    select\n        jsonb_object_agg(\n            tpr.value,\n            (\n                select\n                    json_object_agg(\n                        tai.value,\n                        (\n                            select\n                            jsonb_strip_nulls(to_jsonb(ai_values))\n                            from\n                                (\n                                select\n                                    ai.numeric_value,\n                                    ai.numeric_range_min,\n                                    ai.numeric_range_max,\n                                    ai.text_value,\n                                    ai.code_value\n                                ) as ai_values\n                        )\n                    ) as ai_json\n                from\n                    hame.additional_information ai\n                    join codes.type_of_additional_information tai\n                        on ai.type_additional_information_id = tai.id\n                where\n                    ai.plan_regulation_id = r.id\n                    AND tai.value != 'paakayttotarkoitus'\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.land_use_area_id = $1\n        AND EXISTS (  -- select only regulations that have paakayttotarkoitus additional information\n            select\n            from hame.additional_information ai\n            where\n            ai.plan_regulation_id = r.id\n            AND ai.type_additional_information_id = (\n                select id\n                from codes.type_of_additional_information\n                where value = 'paakayttotarkoitus')\n        )\n$$",
    )
    op.drop_entity(hame_primary_use_regulations)

    hame_regulation_values = PGFunction(
        schema="hame",
        signature="regulation_values(table_name text, id uuid)",
        definition="RETURNS jsonb\n    LANGUAGE 'plpgsql'\n    COST 100\n    STABLE PARALLEL SAFE \nAS $BODY$\nDECLARE\n    return_value jsonb;\nBEGIN\n    EXECUTE format(\n        $SQL$\n        select\n            jsonb_object_agg(\n                tpr.value,\n                (\n                    select\n                        jsonb_strip_nulls(to_jsonb(ai_values))\n                    from\n                        (\n                            select\n                                r.numeric_value,\n                                r.unit,\n                                r.numeric_range_min,\n                                r.numeric_range_max,\n                                r.text_value,\n                                r.text_syntax,\n                                r.code_title,\n                                r.code_list,\n                                r.code_value\n                        ) as ai_values\n                )\n            )\n        from\n            hame.regulation_group_association rga\n            join hame.plan_regulation_group rg\n                on rga.plan_regulation_group_id = rg.id\n            join hame.plan_regulation r\n                on rg.id = r.plan_regulation_group_id\n            join codes.type_of_plan_regulation tpr\n                on r.type_of_plan_regulation_id = tpr.id\n        where\n            rga.%I = $1\n            AND r.value_data_type is not null\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$BODY$",
    )
    op.drop_entity(hame_regulation_values)

    # ### end Alembic commands ###
