"""create_triggers_and_view_table_for_combined_point_table

Revision ID: 5556aef493f0
Revises: 690c5af83e07
Create Date: 2025-09-11 08:33:13.283591

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from alembic_utils.pg_view import PGView
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "5556aef493f0"
down_revision: Union[str, None] = "690c5af83e07"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_point_trg_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_point_modified_at",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_point_trg_point_modified_at)

    hame_point_trg_new_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_point_add_lifecycle_date",
        on_entity="hame.point",
        is_constraint=False,
        definition="AFTER INSERT ON point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_point_trg_new_point_add_lifecycle_date)

    hame_point_trg_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_point_new_lifecycle_date",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE UPDATE ON point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.create_entity(hame_point_trg_point_new_lifecycle_date)

    hame_trgfunc_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_point_update_lifecycle_status)

    hame_point_trg_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_point_new_lifecycle_status",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE INSERT ON point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.create_entity(hame_point_trg_point_new_lifecycle_status)

    hame_point_trg_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_point_add_plan_id_fkey",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE INSERT ON point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_point_trg_point_add_plan_id_fkey)

    hame_point_v = PGView(
        schema="hame",
        signature="point_v",
        definition="select\n    *,\n    hame.short_names('point', id) short_names,\n    hame.type_regulations('point', id) type_regulations,\n    hame.regulation_values('point', id) regulation_values\nfrom\n    hame.point",
    )
    op.create_entity(hame_point_v)

    hame_plan_trg_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_point_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_point_update_lifecycle_status)

    hame_point_v_trg_iiud_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_point_v",
        on_entity="hame.point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.point_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_point_v_trg_iiud_point_v)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_point_v_trg_iiud_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_point_v",
        on_entity="hame.point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.point_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_point_v_trg_iiud_point_v)

    hame_plan_trg_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_point_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_point_update_lifecycle_status)

    hame_point_v = PGView(
        schema="hame",
        signature="point_v",
        definition="select\n    *,\n    hame.short_names('point', id) short_names,\n    hame.type_regulations('point', id) type_regulations,\n    hame.regulation_values('point', id) regulation_values\nfrom\n    hame.point",
    )
    op.drop_entity(hame_point_v)

    hame_point_trg_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_point_add_plan_id_fkey",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE INSERT ON point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_point_trg_point_add_plan_id_fkey)

    hame_point_trg_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_point_new_lifecycle_status",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE INSERT ON point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.drop_entity(hame_point_trg_point_new_lifecycle_status)

    hame_trgfunc_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_point_update_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE hame.point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_point_update_lifecycle_status)

    hame_point_trg_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_point_new_lifecycle_date",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE UPDATE ON point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.drop_entity(hame_point_trg_point_new_lifecycle_date)

    hame_point_trg_new_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_point_add_lifecycle_date",
        on_entity="hame.point",
        is_constraint=False,
        definition="AFTER INSERT ON point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_point_trg_new_point_add_lifecycle_date)

    hame_point_trg_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_point_modified_at",
        on_entity="hame.point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_point_trg_point_modified_at)

    # ### end Alembic commands ###
