"""Cascade delete lifecycle_dates

Revision ID: a58453037fcd
Revises: 08c795658444
Create Date: 2025-02-19 09:03:43.553448

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "a58453037fcd"
down_revision: Union[str, None] = "08c795658444"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "land_use_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "land_use_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "other_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "plan_regulation_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "plan_id_fkey", "lifecycle_date", schema="hame", type_="foreignkey"
    )
    op.drop_constraint(
        "plan_proposition_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "line_id_fkey", "lifecycle_date", schema="hame", type_="foreignkey"
    )
    op.drop_constraint(
        "other_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "plan_id_fkey",
        "lifecycle_date",
        "plan",
        ["plan_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "land_use_point_id_fkey",
        "lifecycle_date",
        "land_use_point",
        ["land_use_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "plan_proposition_id_fkey",
        "lifecycle_date",
        "plan_proposition",
        ["plan_proposition_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "line_id_fkey",
        "lifecycle_date",
        "line",
        ["line_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "plan_regulation_id_fkey",
        "lifecycle_date",
        "plan_regulation",
        ["plan_regulation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "other_point_id_fkey",
        "lifecycle_date",
        "other_point",
        ["other_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "other_area_id_fkey",
        "lifecycle_date",
        "other_area",
        ["other_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "land_use_area_id_fkey",
        "lifecycle_date",
        "land_use_area",
        ["land_use_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "land_use_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "other_area_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "other_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "plan_regulation_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "line_id_fkey", "lifecycle_date", schema="hame", type_="foreignkey"
    )
    op.drop_constraint(
        "plan_proposition_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "land_use_point_id_fkey",
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "plan_id_fkey", "lifecycle_date", schema="hame", type_="foreignkey"
    )
    op.create_foreign_key(
        "other_point_id_fkey",
        "lifecycle_date",
        "other_point",
        ["other_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "line_id_fkey",
        "lifecycle_date",
        "line",
        ["line_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "plan_proposition_id_fkey",
        "lifecycle_date",
        "plan_proposition",
        ["plan_proposition_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "plan_id_fkey",
        "lifecycle_date",
        "plan",
        ["plan_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "plan_regulation_id_fkey",
        "lifecycle_date",
        "plan_regulation",
        ["plan_regulation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "other_area_id_fkey",
        "lifecycle_date",
        "other_area",
        ["other_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "land_use_point_id_fkey",
        "lifecycle_date",
        "land_use_point",
        ["land_use_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        "land_use_area_id_fkey",
        "lifecycle_date",
        "land_use_area",
        ["land_use_area_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    # ### end Alembic commands ###
