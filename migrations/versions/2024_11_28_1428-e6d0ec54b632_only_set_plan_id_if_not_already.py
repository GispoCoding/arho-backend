"""only set plan_id if not already

Revision ID: e6d0ec54b632
Revises: fe3e64308b9e
Create Date: 2024-11-28 14:28:07.017135

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "e6d0ec54b632"
down_revision: Union[str, None] = "fe3e64308b9e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgfunc_add_plan_id_fkey = PGFunction(
        schema="hame",
        signature="trgfunc_add_plan_id_fkey()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        -- Get the most recent plan whose geometry contains the plan object\n        IF NEW.plan_id IS NULL THEN\n            NEW.plan_id := (\n                SELECT id\n                FROM hame.plan\n                WHERE ST_Contains(geom, NEW.geom)\n                ORDER BY created_at DESC\n                LIMIT 1\n            );\n        END IF;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.replace_entity(hame_trgfunc_add_plan_id_fkey)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgfunc_add_plan_id_fkey = PGFunction(
        schema="hame",
        signature="trgfunc_add_plan_id_fkey()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n    BEGIN\n        -- Get the most recent plan whose geometry contains the plan object\n        NEW.plan_id := (\n            SELECT id\n            FROM hame.plan\n            WHERE ST_Contains(geom, NEW.geom)\n            ORDER BY created_at DESC\n            LIMIT 1\n        );\n        RETURN NEW;\n    END;\n    $function$",
    )
    op.replace_entity(hame_trgfunc_add_plan_id_fkey)
    # ### end Alembic commands ###
