"""add forgotten general proposition trigger

Revision ID: b7f815ff2e73
Revises: fb598db5b47a
Create Date: 2024-06-20 15:37:19.619884

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "b7f815ff2e73"
down_revision: Union[str, None] = "fb598db5b47a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgfunc_plan_proposition_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM hame.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_proposition_plan_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_plan_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_plan_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_plan_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_proposition_plan_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status)

    hame_trgfunc_plan_proposition_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_plan_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE status_id UUID := (\n            SELECT lifecycle_status_id\n            FROM hame.plan\n            WHERE plan_regulation_group_id = NEW.plan_regulation_group_id\n            LIMIT 1\n            );\n        BEGIN\n            IF status_id IS NOT NULL THEN\n                NEW.lifecycle_status_id = status_id;\n            END IF;\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_plan_new_lifecycle_status)

    # ### end Alembic commands ###
