"""remove update plan object lifecycle triggers

Revision ID: 385ba899bb2e
Revises: 102e19dd08da
Create Date: 2024-11-27 14:09:21.904224

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "385ba899bb2e"
down_revision: Union[str, None] = "102e19dd08da"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status
    )

    hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status
    )

    hame_line_trg_line_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_regulation_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_line_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(hame_line_trg_line_plan_regulation_update_lifecycle_status)

    hame_line_trg_line_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_proposition_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_line_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(hame_line_trg_line_plan_proposition_update_lifecycle_status)

    hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_area_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status
    )

    hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_area_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status
    )

    hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_point_plan_regulation_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status
    )

    hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_point_plan_proposition_update_lifecycle_status()",
    )
    op.drop_entity(
        hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status
    )

    hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status)

    hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status)

    hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status)

    hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status)

    hame_trgfunc_line_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_line_plan_regulation_update_lifecycle_status)

    hame_trgfunc_line_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_line_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_other_area_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_other_area_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_other_point_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_other_point_plan_proposition_update_lifecycle_status)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    hame_trgfunc_other_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_other_point_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_other_point_plan_regulation_update_lifecycle_status)

    hame_trgfunc_other_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_other_area_plan_proposition_update_lifecycle_status)

    hame_trgfunc_other_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_other_area_plan_regulation_update_lifecycle_status)

    hame_trgfunc_line_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_line_plan_proposition_update_lifecycle_status)

    hame_trgfunc_line_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_line_plan_regulation_update_lifecycle_status)

    hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(
        hame_trgfunc_land_use_point_plan_proposition_update_lifecycle_status
    )

    hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(
        hame_trgfunc_land_use_point_plan_regulation_update_lifecycle_status
    )

    hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_proposition\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(
        hame_trgfunc_land_use_area_plan_proposition_update_lifecycle_status
    )

    hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                UPDATE hame.plan_regulation\n                SET lifecycle_status_id = NEW.lifecycle_status_id\n                WHERE (plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND lifecycle_status_id = OLD.lifecycle_status_id);\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_land_use_area_plan_regulation_update_lifecycle_status)

    hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_point_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_point_trg_other_point_plan_proposition_update_lifecycle_status
    )

    hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_point_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_point_trg_other_point_plan_regulation_update_lifecycle_status
    )

    hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_area_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_area_trg_other_area_plan_proposition_update_lifecycle_status
    )

    hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_area_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_other_area_trg_other_area_plan_regulation_update_lifecycle_status
    )

    hame_line_trg_line_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_proposition_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_line_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(hame_line_trg_line_plan_proposition_update_lifecycle_status)

    hame_line_trg_line_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_plan_regulation_update_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_line_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(hame_line_trg_line_plan_regulation_update_lifecycle_status)

    hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_point_trg_land_use_point_plan_proposition_update_lifecycle_status
    )

    hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_point_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_point_trg_land_use_point_plan_regulation_update_lifecycle_status
    )

    hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_proposition_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_proposition_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_area_trg_land_use_area_plan_proposition_update_lifecycle_status
    )

    hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_plan_regulation_update_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_area_plan_regulation_update_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_area_trg_land_use_area_plan_regulation_update_lifecycle_status
    )

    # ### end Alembic commands ###
