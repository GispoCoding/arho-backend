"""Add regulation aggregation views

Revision ID: 59ccf36de6e5
Revises: b5e256d780f5
Create Date: 2025-06-10 17:07:51.789670

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_view import PGView
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "59ccf36de6e5"
down_revision: Union[str, None] = "b5e256d780f5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_land_use_area_v = PGView(
        schema="hame",
        signature="land_use_area_v",
        definition="select\n    *,\n    hame.short_names('land_use_area', id) short_names,\n    hame.primary_use_regulations(id) primary_use,\n    hame.regulation_values('land_use_area', id) regulation_values\nfrom\n    hame.land_use_area",
    )
    op.create_entity(hame_land_use_area_v)

    hame_land_use_point_v = PGView(
        schema="hame",
        signature="land_use_point_v",
        definition="select\n    *,\n    hame.short_names('land_use_point', id) short_names,\n    hame.type_regulations('land_use_point', id) type_regulations,\n    hame.regulation_values('land_use_point', id) regulation_values\nfrom\n    hame.land_use_point",
    )
    op.create_entity(hame_land_use_point_v)

    hame_other_area_v = PGView(
        schema="hame",
        signature="other_area_v",
        definition="select\n    *,\n    hame.short_names('other_area', id) short_names,\n    hame.sub_area_regulations(id) sub_area,\n    hame.regulation_values('other_area', id) regulation_values\nfrom\n    hame.other_area",
    )
    op.create_entity(hame_other_area_v)

    hame_line_v = PGView(
        schema="hame",
        signature="line_v",
        definition="select\n    *,\n    hame.short_names('line', id) short_names,\n    hame.type_regulations('line', id) regulations,\n    hame.regulation_values('line', id) regulation_values\nfrom\n    hame.line",
    )
    op.create_entity(hame_line_v)

    hame_other_point_v = PGView(
        schema="hame",
        signature="other_point_v",
        definition="select\n    *,\n    hame.short_names('other_point', id) short_names,\n    hame.type_regulations('other_point', id) regulations,\n    hame.regulation_values('other_point', id) regulation_values\nfrom\n    hame.other_point",
    )
    op.create_entity(hame_other_point_v)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_other_point_v = PGView(
        schema="hame",
        signature="other_point_v",
        definition="select\n    *,\n    hame.short_names('other_point', id) short_names,\n    hame.type_regulations('other_point', id) regulations,\n    hame.regulation_values('other_point', id) regulation_values\nfrom\n    hame.other_point",
    )
    op.drop_entity(hame_other_point_v)

    hame_line_v = PGView(
        schema="hame",
        signature="line_v",
        definition="select\n    *,\n    hame.short_names('line', id) short_names,\n    hame.type_regulations('line', id) regulations,\n    hame.regulation_values('line', id) regulation_values\nfrom\n    hame.line",
    )
    op.drop_entity(hame_line_v)

    hame_other_area_v = PGView(
        schema="hame",
        signature="other_area_v",
        definition="select\n    *,\n    hame.short_names('other_area', id) short_names,\n    hame.sub_area_regulations(id) sub_area,\n    hame.regulation_values('other_area', id) regulation_values\nfrom\n    hame.other_area",
    )
    op.drop_entity(hame_other_area_v)

    hame_land_use_point_v = PGView(
        schema="hame",
        signature="land_use_point_v",
        definition="select\n    *,\n    hame.short_names('land_use_point', id) short_names,\n    hame.type_regulations('land_use_point', id) type_regulations,\n    hame.regulation_values('land_use_point', id) regulation_values\nfrom\n    hame.land_use_point",
    )
    op.drop_entity(hame_land_use_point_v)

    hame_land_use_area_v = PGView(
        schema="hame",
        signature="land_use_area_v",
        definition="select\n    *,\n    hame.short_names('land_use_area', id) short_names,\n    hame.primary_use_regulations(id) primary_use,\n    hame.regulation_values('land_use_area', id) regulation_values\nfrom\n    hame.land_use_area",
    )
    op.drop_entity(hame_land_use_area_v)

    # ### end Alembic commands ###
