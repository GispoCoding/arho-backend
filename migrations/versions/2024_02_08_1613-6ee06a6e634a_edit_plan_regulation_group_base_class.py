"""edit_plan_regulation_group_base_class

Revision ID: 6ee06a6e634a
Revises: 811b23178cef
Create Date: 2024-02-08 16:13:11.875724

"""
from typing import Sequence, Union

# import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6ee06a6e634a"
down_revision: Union[str, None] = "811b23178cef"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "plan_lifecycle_status_id_fkey",
        "plan_regulation_group",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("plan_regulation_group", "valid_to", schema="hame")
    op.drop_column("plan_regulation_group", "valid_from", schema="hame")
    op.drop_column("plan_regulation_group", "exported_at", schema="hame")
    op.drop_column("plan_regulation_group", "lifecycle_status_id", schema="hame")
    op.drop_column("plan_regulation_group", "repealed_at", schema="hame")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan_regulation_group",
        sa.Column(
            "repealed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation_group",
        sa.Column(
            "lifecycle_status_id", sa.UUID(), autoincrement=False, nullable=False
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation_group",
        sa.Column(
            "exported_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation_group",
        sa.Column(
            "valid_from", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation_group",
        sa.Column(
            "valid_to", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "plan_lifecycle_status_id_fkey",
        "plan_regulation_group",
        "lifecycle_status",
        ["lifecycle_status_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    # ### end Alembic commands ###
