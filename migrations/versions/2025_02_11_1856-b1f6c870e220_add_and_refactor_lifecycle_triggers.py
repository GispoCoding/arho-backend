"""add and refactor lifecycle triggers

Revision ID: b1f6c870e220
Revises: 70e48d7ed252
Create Date: 2025-02-11 18:56:01.154498

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "b1f6c870e220"
down_revision: Union[str, None] = "70e48d7ed252"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgfunc_new_object_add_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_new_object_add_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        EXECUTE format(\n            $query$\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, %I, starting_at)\n            VALUES\n                ($1, $2, CURRENT_TIMESTAMP)\n            $query$,\n            TG_TABLE_NAME || '_id'\n        ) USING NEW.lifecycle_status_id, NEW.id;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_new_object_add_lifecycle_date)

    hame_trgfunc_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        EXECUTE format(\n            $query$\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, %I, starting_at)\n            VALUES\n                ($1, $2, CURRENT_TIMESTAMP)\n            $query$,\n            TG_TABLE_NAME || '_id'\n        ) USING NEW.lifecycle_status_id, NEW.id;\n        EXECUTE format(\n            $query$\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE %I = $1\n                AND ending_at IS NULL\n                AND lifecycle_status_id = $2\n            $query$,\n            TG_TABLE_NAME || '_id'\n        ) USING NEW.id, OLD.lifecycle_status_id;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_new_lifecycle_date)

    hame_trgfunc_plan_object_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_object_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_object_new_lifecycle_status)

    hame_trgfunc_plan_regulation_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT p.lifecycle_status_id\n                FROM\n                    hame.plan p\n                    JOIN hame.plan_regulation_group prg\n                        ON p.id = prg.plan_id\n                WHERE prg.id = NEW.plan_regulation_group_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.create_entity(hame_trgfunc_plan_regulation_new_lifecycle_status)

    hame_land_use_area_trg_new_land_use_area_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_land_use_area_add_lifecycle_date",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="AFTER INSERT ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_land_use_area_trg_new_land_use_area_add_lifecycle_date)

    hame_land_use_point_trg_new_land_use_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_land_use_point_add_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="AFTER INSERT ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_land_use_point_trg_new_land_use_point_add_lifecycle_date)

    hame_line_trg_new_line_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_line_add_lifecycle_date",
        on_entity="hame.line",
        is_constraint=False,
        definition="AFTER INSERT ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_line_trg_new_line_add_lifecycle_date)

    hame_other_area_trg_new_other_area_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_other_area_add_lifecycle_date",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="AFTER INSERT ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_other_area_trg_new_other_area_add_lifecycle_date)

    hame_other_point_trg_new_other_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_other_point_add_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="AFTER INSERT ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_other_point_trg_new_other_point_add_lifecycle_date)

    hame_plan_trg_new_plan_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_plan_add_lifecycle_date",
        on_entity="hame.plan",
        is_constraint=False,
        definition="AFTER INSERT ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_plan_trg_new_plan_add_lifecycle_date)

    hame_plan_proposition_trg_new_plan_proposition_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_plan_proposition_add_lifecycle_date",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="AFTER INSERT ON plan_proposition\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_plan_proposition_trg_new_plan_proposition_add_lifecycle_date)

    hame_plan_regulation_trg_new_plan_regulation_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_plan_regulation_add_lifecycle_date",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="AFTER INSERT ON plan_regulation\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_plan_regulation_trg_new_plan_regulation_add_lifecycle_date)

    hame_land_use_area_trg_land_use_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_date",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_date)

    hame_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_date)

    hame_line_trg_line_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_date",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON line\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_line_trg_line_new_lifecycle_date)

    hame_other_area_trg_other_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_date",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_area\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_other_area_trg_other_area_new_lifecycle_date)

    hame_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON other_point\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_other_point_trg_other_point_new_lifecycle_date)

    hame_plan_trg_plan_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_new_lifecycle_date",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_plan_trg_plan_new_lifecycle_date)

    hame_plan_proposition_trg_plan_proposition_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_new_lifecycle_date",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_proposition\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_plan_proposition_trg_plan_proposition_new_lifecycle_date)

    hame_plan_regulation_trg_plan_regulation_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_new_lifecycle_date",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE UPDATE ON plan_regulation\n        FOR EACH ROW\n        WHEN (NEW.lifecycle_status_id <> OLD.lifecycle_status_id)\n        EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.replace_entity(hame_plan_regulation_trg_plan_regulation_new_lifecycle_date)

    hame_land_use_area_trg_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.replace_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_status)

    hame_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON land_use_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.replace_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_status)

    hame_line_trg_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT ON line\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.replace_entity(hame_line_trg_line_new_lifecycle_status)

    hame_other_area_trg_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON other_area\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.replace_entity(hame_other_area_trg_other_area_new_lifecycle_status)

    hame_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON other_point\n        FOR EACH ROW\n        WHEN (NEW.plan_id IS NOT NULL)\n        EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.replace_entity(hame_other_point_trg_other_point_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_new_lifecycle_status()",
    )
    op.create_entity(hame_plan_regulation_trg_plan_regulation_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_new_lifecycle_status()",
    )
    op.create_entity(hame_plan_proposition_trg_plan_proposition_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_plan_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_plan_regulation_plan_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_plan_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_plan_proposition_plan_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status)

    hame_trgfunc_land_use_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_area_new_lifecycle_date)

    hame_trgfunc_land_use_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_point_new_lifecycle_date)

    hame_trgfunc_line_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, line_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE line_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_line_new_lifecycle_date)

    hame_trgfunc_other_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_other_area_new_lifecycle_date)

    hame_trgfunc_other_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_other_point_new_lifecycle_date)

    hame_trgfunc_plan_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_plan_new_lifecycle_date)

    hame_trgfunc_plan_proposition_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_proposition_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_proposition_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_new_lifecycle_date)

    hame_trgfunc_plan_regulation_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_regulation_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_regulation_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_new_lifecycle_date)

    hame_trgfunc_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_area_new_lifecycle_status)

    hame_trgfunc_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_point_new_lifecycle_status)

    hame_trgfunc_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_line_new_lifecycle_status)

    hame_trgfunc_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_other_area_new_lifecycle_status)

    hame_trgfunc_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_other_point_new_lifecycle_status)

    hame_trgfunc_plan_regulation_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_plan_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                NEW.lifecycle_status_id = (\n                    SELECT p.lifecycle_status_id\n                    FROM\n                        hame.plan p\n                        JOIN hame.plan_regulation_group prg\n                            ON p.id = prg.plan_id\n                    WHERE prg.id = NEW.plan_regulation_group_id\n                );\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_plan_new_lifecycle_status)

    hame_trgfunc_plan_proposition_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_plan_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                NEW.lifecycle_status_id = (\n                    SELECT p.lifecycle_status_id\n                    FROM\n                        hame.plan p\n                        JOIN hame.plan_regulation_group prg\n                            ON p.id = prg.plan_id\n                    WHERE prg.id = NEW.plan_regulation_group_id\n                );\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_entity(hame_trgfunc_plan_proposition_plan_new_lifecycle_status)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgfunc_plan_proposition_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_plan_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                NEW.lifecycle_status_id = (\n                    SELECT p.lifecycle_status_id\n                    FROM\n                        hame.plan p\n                        JOIN hame.plan_regulation_group prg\n                            ON p.id = prg.plan_id\n                    WHERE prg.id = NEW.plan_regulation_group_id\n                );\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_plan_proposition_plan_new_lifecycle_status)

    hame_trgfunc_plan_regulation_plan_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_plan_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                NEW.lifecycle_status_id = (\n                    SELECT p.lifecycle_status_id\n                    FROM\n                        hame.plan p\n                        JOIN hame.plan_regulation_group prg\n                            ON p.id = prg.plan_id\n                    WHERE prg.id = NEW.plan_regulation_group_id\n                );\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(hame_trgfunc_plan_regulation_plan_new_lifecycle_status)

    hame_trgfunc_other_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_other_point_new_lifecycle_status)

    hame_trgfunc_other_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_other_area_new_lifecycle_status)

    hame_trgfunc_line_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_line_new_lifecycle_status)

    hame_trgfunc_land_use_point_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_land_use_point_new_lifecycle_status)

    hame_trgfunc_land_use_area_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_land_use_area_new_lifecycle_status)

    hame_trgfunc_plan_regulation_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_regulation_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_regulation_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_plan_regulation_new_lifecycle_date)

    hame_trgfunc_plan_proposition_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_proposition_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_proposition_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_proposition_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_plan_proposition_new_lifecycle_date)

    hame_trgfunc_plan_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_plan_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, plan_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE plan_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_plan_new_lifecycle_date)

    hame_trgfunc_other_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_other_point_new_lifecycle_date)

    hame_trgfunc_other_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, other_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE other_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_other_area_new_lifecycle_date)

    hame_trgfunc_line_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_line_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, line_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE line_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_line_new_lifecycle_date)

    hame_trgfunc_land_use_point_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_point_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_point_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_land_use_point_new_lifecycle_date)

    hame_trgfunc_land_use_area_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_area_new_lifecycle_date()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, land_use_area_id, starting_at)\n            VALUES\n                (NEW.lifecycle_status_id, NEW.id, CURRENT_TIMESTAMP);\n\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE land_use_area_id=NEW.id\n                AND ending_at IS NULL\n                AND lifecycle_status_id=OLD.lifecycle_status_id;\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_land_use_area_new_lifecycle_date)

    hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_plan_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_plan_proposition_plan_new_lifecycle_status()",
    )
    op.create_entity(
        hame_plan_proposition_trg_plan_proposition_plan_new_lifecycle_status
    )

    hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_plan_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_plan_regulation_plan_new_lifecycle_status()",
    )
    op.create_entity(hame_plan_regulation_trg_plan_regulation_plan_new_lifecycle_status)

    hame_plan_proposition_trg_plan_proposition_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_new_lifecycle_status",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_proposition\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_proposition_trg_plan_proposition_new_lifecycle_status)

    hame_plan_regulation_trg_plan_regulation_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_new_lifecycle_status",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_regulation\n            FOR EACH ROW\n            EXECUTE FUNCTION hame.trgfunc_plan_regulation_new_lifecycle_status()",
    )
    op.drop_entity(hame_plan_regulation_trg_plan_regulation_new_lifecycle_status)

    hame_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_point FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_other_point_new_lifecycle_status()",
    )
    op.replace_entity(hame_other_point_trg_other_point_new_lifecycle_status)
    hame_other_area_trg_other_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_status",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_area FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_other_area_new_lifecycle_status()",
    )
    op.replace_entity(hame_other_area_trg_other_area_new_lifecycle_status)
    hame_line_trg_line_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_status",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.line FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_line_new_lifecycle_status()",
    )
    op.replace_entity(hame_line_trg_line_new_lifecycle_status)
    hame_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.land_use_point FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_land_use_point_new_lifecycle_status()",
    )
    op.replace_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_status)
    hame_land_use_area_trg_land_use_area_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_status",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.land_use_area FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_land_use_area_new_lifecycle_status()",
    )
    op.replace_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_status)
    hame_plan_regulation_trg_plan_regulation_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_regulation_new_lifecycle_date",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan_regulation FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_plan_regulation_new_lifecycle_date()",
    )
    op.replace_entity(hame_plan_regulation_trg_plan_regulation_new_lifecycle_date)
    hame_plan_proposition_trg_plan_proposition_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_proposition_new_lifecycle_date",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan_proposition FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_plan_proposition_new_lifecycle_date()",
    )
    op.replace_entity(hame_plan_proposition_trg_plan_proposition_new_lifecycle_date)
    hame_plan_trg_plan_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_plan_new_lifecycle_date",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_plan_new_lifecycle_date()",
    )
    op.replace_entity(hame_plan_trg_plan_new_lifecycle_date)
    hame_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_point_new_lifecycle_date()",
    )
    op.replace_entity(hame_other_point_trg_other_point_new_lifecycle_date)
    hame_other_area_trg_other_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_area_new_lifecycle_date",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_area_new_lifecycle_date()",
    )
    op.replace_entity(hame_other_area_trg_other_area_new_lifecycle_date)
    hame_line_trg_line_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_line_new_lifecycle_date",
        on_entity="hame.line",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.line FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_line_new_lifecycle_date()",
    )
    op.replace_entity(hame_line_trg_line_new_lifecycle_date)
    hame_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_point_new_lifecycle_date()",
    )
    op.replace_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_date)
    hame_land_use_area_trg_land_use_area_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_area_new_lifecycle_date",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_area FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_area_new_lifecycle_date()",
    )
    op.replace_entity(hame_land_use_area_trg_land_use_area_new_lifecycle_date)
    hame_plan_regulation_trg_new_plan_regulation_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_plan_regulation_add_lifecycle_date",
        on_entity="hame.plan_regulation",
        is_constraint=False,
        definition="AFTER INSERT ON plan_regulation\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_plan_regulation_trg_new_plan_regulation_add_lifecycle_date)

    hame_plan_proposition_trg_new_plan_proposition_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_plan_proposition_add_lifecycle_date",
        on_entity="hame.plan_proposition",
        is_constraint=False,
        definition="AFTER INSERT ON plan_proposition\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_plan_proposition_trg_new_plan_proposition_add_lifecycle_date)

    hame_plan_trg_new_plan_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_plan_add_lifecycle_date",
        on_entity="hame.plan",
        is_constraint=False,
        definition="AFTER INSERT ON plan\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_plan_trg_new_plan_add_lifecycle_date)

    hame_other_point_trg_new_other_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_other_point_add_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="AFTER INSERT ON other_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_other_point_trg_new_other_point_add_lifecycle_date)

    hame_other_area_trg_new_other_area_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_other_area_add_lifecycle_date",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="AFTER INSERT ON other_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_other_area_trg_new_other_area_add_lifecycle_date)

    hame_line_trg_new_line_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_line_add_lifecycle_date",
        on_entity="hame.line",
        is_constraint=False,
        definition="AFTER INSERT ON line\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_line_trg_new_line_add_lifecycle_date)

    hame_land_use_point_trg_new_land_use_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_land_use_point_add_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="AFTER INSERT ON land_use_point\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_land_use_point_trg_new_land_use_point_add_lifecycle_date)

    hame_land_use_area_trg_new_land_use_area_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_land_use_area_add_lifecycle_date",
        on_entity="hame.land_use_area",
        is_constraint=False,
        definition="AFTER INSERT ON land_use_area\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_land_use_area_trg_new_land_use_area_add_lifecycle_date)

    hame_trgfunc_plan_regulation_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_regulation_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT p.lifecycle_status_id\n                FROM\n                    hame.plan p\n                    JOIN hame.plan_regulation_group prg\n                        ON p.id = prg.plan_id\n                WHERE prg.id = NEW.plan_regulation_group_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_regulation_new_lifecycle_status)

    hame_trgfunc_plan_object_new_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_plan_object_new_lifecycle_status()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            NEW.lifecycle_status_id = (\n                SELECT lifecycle_status_id FROM hame.plan WHERE plan.id = NEW.plan_id\n            );\n            RETURN NEW;\n        END;\n        $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_plan_object_new_lifecycle_status)

    hame_trgfunc_new_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_new_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        EXECUTE format(\n            $query$\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, %I, starting_at)\n            VALUES\n                ($1, $2, CURRENT_TIMESTAMP)\n            $query$,\n            TG_TABLE_NAME || '_id'\n        ) USING NEW.lifecycle_status_id, NEW.id;\n        EXECUTE format(\n            $query$\n            UPDATE hame.lifecycle_date\n            SET ending_at=CURRENT_TIMESTAMP\n            WHERE %I = $1\n                AND ending_at IS NULL\n                AND lifecycle_status_id = $2\n            $query$,\n            TG_TABLE_NAME || '_id'\n        ) USING NEW.id, OLD.lifecycle_status_id;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_new_lifecycle_date)

    hame_trgfunc_new_object_add_lifecycle_date = PGFunction(
        schema="hame",
        signature="trgfunc_new_object_add_lifecycle_date()",
        definition="RETURNS TRIGGER AS $$\n    BEGIN\n        EXECUTE format(\n            $query$\n            INSERT INTO hame.lifecycle_date\n                (lifecycle_status_id, %I, starting_at)\n            VALUES\n                ($1, $2, CURRENT_TIMESTAMP)\n            $query$,\n            TG_TABLE_NAME || '_id'\n        ) USING NEW.lifecycle_status_id, NEW.id;\n        RETURN NEW;\n    END;\n    $$ language 'plpgsql'",
    )
    op.drop_entity(hame_trgfunc_new_object_add_lifecycle_date)

    # ### end Alembic commands ###
