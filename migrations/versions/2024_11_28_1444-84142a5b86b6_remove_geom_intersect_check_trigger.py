"""remove geom intersect check trigger

Revision ID: 84142a5b86b6
Revises: e6d0ec54b632
Create Date: 2024-11-26 17:05:22.749308

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "84142a5b86b6"
down_revision: Union[str, None] = "e6d0ec54b632"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_other_area_trg_other_area_insert_intersecting_geometries = PGTrigger(
        schema="hame",
        signature="trg_other_area_insert_intersecting_geometries",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_area FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_other_area_insert_intersecting_geometries()",
    )
    op.drop_entity(hame_other_area_trg_other_area_insert_intersecting_geometries)

    hame_trgfunc_other_area_insert_intersecting_geometries = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_insert_intersecting_geometries()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n    BEGIN\n        -- Check if the new entry has id of a plan_regulation_group\n        -- which has id of a plan_regulation that has intended_use_id\n        -- that equals to 'paakayttotarkoitus'\n        IF EXISTS (\n            SELECT 1\n            FROM hame.plan_regulation_group prg\n            JOIN hame.plan_regulation pr ON pr.plan_regulation_group_id = prg.id\n            JOIN codes.type_of_additional_information tai ON tai.id = pr.intended_use_id\n            WHERE tai.value = 'paakayttotarkoitus'\n            AND prg.id = NEW.plan_regulation_group_id\n        ) THEN\n            -- check if there already is an entry in other_area table with the same\n            -- plan_regulation_group that the new geometry intersects\n            IF EXISTS (\n                SELECT 1\n                FROM hame.other_area oa\n                WHERE oa.plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND ST_Intersects(oa.geom, NEW.geom)\n            ) THEN\n                RAISE EXCEPTION 'New entry intersects with existing entry, both with\n                intended_use of paakayttotarkoitus';\n            END IF;\n        END IF;\n\n        RETURN NEW;\n    END;\n    $function$",
    )
    op.drop_entity(hame_trgfunc_other_area_insert_intersecting_geometries)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    hame_trgfunc_other_area_insert_intersecting_geometries = PGFunction(
        schema="hame",
        signature="trgfunc_other_area_insert_intersecting_geometries()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n    BEGIN\n        -- Check if the new entry has id of a plan_regulation_group\n        -- which has id of a plan_regulation that has intended_use_id\n        -- that equals to 'paakayttotarkoitus'\n        IF EXISTS (\n            SELECT 1\n            FROM hame.plan_regulation_group prg\n            JOIN hame.plan_regulation pr ON pr.plan_regulation_group_id = prg.id\n            JOIN codes.type_of_additional_information tai ON tai.id = pr.intended_use_id\n            WHERE tai.value = 'paakayttotarkoitus'\n            AND prg.id = NEW.plan_regulation_group_id\n        ) THEN\n            -- check if there already is an entry in other_area table with the same\n            -- plan_regulation_group that the new geometry intersects\n            IF EXISTS (\n                SELECT 1\n                FROM hame.other_area oa\n                WHERE oa.plan_regulation_group_id = NEW.plan_regulation_group_id\n                AND ST_Intersects(oa.geom, NEW.geom)\n            ) THEN\n                RAISE EXCEPTION 'New entry intersects with existing entry, both with\n                intended_use of paakayttotarkoitus';\n            END IF;\n        END IF;\n\n        RETURN NEW;\n    END;\n    $function$",
    )
    op.create_entity(hame_trgfunc_other_area_insert_intersecting_geometries)

    hame_other_area_trg_other_area_insert_intersecting_geometries = PGTrigger(
        schema="hame",
        signature="trg_other_area_insert_intersecting_geometries",
        on_entity="hame.other_area",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_area FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_other_area_insert_intersecting_geometries()",
    )
    op.create_entity(hame_other_area_trg_other_area_insert_intersecting_geometries)

    # ### end Alembic commands ###
