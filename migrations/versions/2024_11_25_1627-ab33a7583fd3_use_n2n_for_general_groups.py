"""regulation groups

Revision ID: ab33a7583fd3
Revises: 626124880789
Create Date: 2024-11-25 16:27:49.052778

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "ab33a7583fd3"
down_revision: Union[str, None] = "5d619f6fd959"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "regulation_group_association",
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("plan_regulation_group_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column(
            "plan_id",
            sa.UUID(as_uuid=False),
            nullable=True,
            comment="A plan in which the regulation group is a general regulation group",
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"],
            ["hame.plan.id"],
            name="plan_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["plan_regulation_group_id"],
            ["hame.plan_regulation_group.id"],
            name="plan_regulation_group_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_plan_id"),
        "regulation_group_association",
        ["plan_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_plan_regulation_group_id"),
        "regulation_group_association",
        ["plan_regulation_group_id"],
        unique=False,
        schema="hame",
    )

    # Change existing general groups to use new n2n approach
    op.execute(
        """
        INSERT INTO hame.regulation_group_association (plan_regulation_group_id, plan_id)
        SELECT plan_regulation_group_id, id
        FROM hame.plan
        """
    )
    op.drop_constraint(
        "plan_regulation_group_id_fkey",
        "plan",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("plan", "plan_regulation_group_id", schema="hame")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan",
        sa.Column(
            "plan_regulation_group_id",
            sa.UUID(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    # Try to restore to the previous approach.
    # Looses data if there are multiple regulation groups for a plan.
    # Sets the last regulation group for the plan.
    op.execute(
        """
        UPDATE hame.plan p
        SET plan_regulation_group_id = rga.plan_regulation_group_id
        FROM hame.regulation_group_association rga
        WHERE rga.plan_id = p.id
        """
    )
    op.create_foreign_key(
        "plan_regulation_group_id_fkey",
        "plan",
        "plan_regulation_group",
        ["plan_regulation_group_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_plan_regulation_group_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_plan_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_table("regulation_group_association", schema="hame")
    # ### end Alembic commands ###
