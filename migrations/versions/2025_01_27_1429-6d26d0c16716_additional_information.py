"""additional information

Revision ID: 6d26d0c16716
Revises: d7a23c8273dc
Create Date: 2025-01-27 14:29:21.477388

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6d26d0c16716"
down_revision: Union[str, None] = "d7a23c8273dc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "additional_information",
        sa.Column("plan_regulation_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "type_additional_information_id",
            sa.UUID(as_uuid=False),
            nullable=False,
        ),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "value_data_type",
            sa.Enum(
                "LocalizedText",
                "Text",
                "Numeric",
                "NumericRange",
                "PositiveNumeric",
                "PositiveNumericRange",
                "Decimal",
                "DecimalRange",
                "PositiveDecimal",
                "PositiveDecimalRange",
                "Code",
                "Identifier",
                "SpotElevation",
                "TimePeriod",
                "TimePeriodDateOnly",
                name="attributevaluedatatype",
            ),
            nullable=True,
        ),
        sa.Column("numeric_value", sa.Float(), nullable=True),
        sa.Column("numeric_range_min", sa.Float(), nullable=True),
        sa.Column("numeric_range_max", sa.Float(), nullable=True),
        sa.Column("unit", sa.String(), nullable=True),
        sa.Column(
            "text_value",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("text_syntax", sa.String(), nullable=True),
        sa.Column("code_list", sa.String(), nullable=True),
        sa.Column("code_value", sa.String(), nullable=True),
        sa.Column(
            "code_title",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("height_reference_point", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["plan_regulation_id"],
            ["hame.plan_regulation.id"],
            name="plan_regulation_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["type_additional_information_id"],
            ["codes.type_of_additional_information.id"],
            name="type_additional_information_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_additional_information_plan_regulation_id"),
        "additional_information",
        ["plan_regulation_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_additional_information_type_additional_information_id"),
        "additional_information",
        ["type_additional_information_id"],
        unique=False,
        schema="hame",
    )
    op.add_column(
        "land_use_area",
        sa.Column("height_reference_point", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "land_use_point",
        sa.Column("height_reference_point", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "line",
        sa.Column("height_reference_point", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_area",
        sa.Column("height_reference_point", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "other_point",
        sa.Column("height_reference_point", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "value_data_type",
            sa.Enum(
                "LocalizedText",
                "Text",
                "Numeric",
                "NumericRange",
                "PositiveNumeric",
                "PositiveNumericRange",
                "Decimal",
                "DecimalRange",
                "PositiveDecimal",
                "PositiveDecimalRange",
                "Code",
                "Identifier",
                "SpotElevation",
                "TimePeriod",
                "TimePeriodDateOnly",
                name="attributevaluedatatype",
            ),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("text_syntax", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("code_list", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("code_value", sa.String(), nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "code_title",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("height_reference_point", sa.String(), nullable=True),
        schema="hame",
    )
    op.alter_column(
        "plan_regulation",
        "numeric_range_min",
        existing_type=sa.INTEGER(),
        type_=sa.Float(),
        existing_nullable=True,
        schema="hame",
    )
    op.alter_column(
        "plan_regulation",
        "numeric_range_max",
        existing_type=sa.INTEGER(),
        type_=sa.Float(),
        existing_nullable=True,
        schema="hame",
    )
    op.drop_constraint(
        "development_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "reservation_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "existence_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "intended_use_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "significance_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "regulation_type_additional_information_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "construction_control_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        "disturbance_prevention_id_fkey",
        "plan_regulation",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_column("plan_regulation", "disturbance_prevention_id", schema="hame")
    op.drop_column("plan_regulation", "construction_control_id", schema="hame")
    op.drop_column("plan_regulation", "intended_use_id", schema="hame")
    op.drop_column("plan_regulation", "existence_id", schema="hame")
    op.drop_column("plan_regulation", "development_id", schema="hame")
    op.drop_column("plan_regulation", "reservation_id", schema="hame")
    op.drop_column(
        "plan_regulation",
        "regulation_type_additional_information_id",
        schema="hame",
    )
    op.drop_column("plan_regulation", "significance_id", schema="hame")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plan_regulation",
        sa.Column("significance_id", sa.UUID(), autoincrement=False, nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "regulation_type_additional_information_id",
            sa.UUID(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("reservation_id", sa.UUID(), autoincrement=False, nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("development_id", sa.UUID(), autoincrement=False, nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("existence_id", sa.UUID(), autoincrement=False, nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column("intended_use_id", sa.UUID(), autoincrement=False, nullable=True),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "construction_control_id",
            sa.UUID(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan_regulation",
        sa.Column(
            "disturbance_prevention_id",
            sa.UUID(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.create_foreign_key(
        "disturbance_prevention_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["disturbance_prevention_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "construction_control_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["construction_control_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "regulation_type_additional_information_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["regulation_type_additional_information_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "significance_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["significance_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "intended_use_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["intended_use_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "existence_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["existence_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "reservation_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["reservation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.create_foreign_key(
        "development_id_fkey",
        "plan_regulation",
        "type_of_additional_information",
        ["development_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.alter_column(
        "plan_regulation",
        "numeric_range_max",
        existing_type=sa.Float(),
        type_=sa.INTEGER(),
        existing_nullable=True,
        schema="hame",
    )
    op.alter_column(
        "plan_regulation",
        "numeric_range_min",
        existing_type=sa.Float(),
        type_=sa.INTEGER(),
        existing_nullable=True,
        schema="hame",
    )
    op.drop_column("plan_regulation", "height_reference_point", schema="hame")
    op.drop_column("plan_regulation", "code_title", schema="hame")
    op.drop_column("plan_regulation", "code_value", schema="hame")
    op.drop_column("plan_regulation", "code_list", schema="hame")
    op.drop_column("plan_regulation", "text_syntax", schema="hame")
    op.drop_column("plan_regulation", "value_data_type", schema="hame")
    op.drop_column("other_point", "height_reference_point", schema="hame")
    op.drop_column("other_area", "height_reference_point", schema="hame")
    op.drop_column("line", "height_reference_point", schema="hame")
    op.drop_column("land_use_point", "height_reference_point", schema="hame")
    op.drop_column("land_use_area", "height_reference_point", schema="hame")
    op.drop_index(
        op.f("ix_hame_additional_information_type_additional_information_id"),
        table_name="additional_information",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_additional_information_plan_regulation_id"),
        table_name="additional_information",
        schema="hame",
    )
    op.drop_table("additional_information", schema="hame")
    # ### end Alembic commands ###
