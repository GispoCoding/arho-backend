"""allow multiple additional infos

Revision ID: 7831e76a7758
Revises: 5556aef493f0
Create Date: 2025-10-02 13:28:32.183035

"""

from collections.abc import Sequence

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "7831e76a7758"
down_revision: str | None = "5556aef493f0"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_primary_use_regulations = PGFunction(
        schema="hame",
        signature="primary_use_regulations(land_use_area_id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE sql\nAS\n$$\n    select\n        jsonb_object_agg(\n            tpr.value,\n            coalesce(\n                (\n                    select\n                    jsonb_object_agg(\n                        ai_type,\n                        ai_values_array\n                    )\n                    from (\n                        select\n                            tai.value ai_type,\n                            jsonb_agg(\n                                (\n                                    select\n                                        jsonb_strip_nulls(to_jsonb(ai_values))\n                                    from\n                                        (\n                                        select\n                                            ai.numeric_value,\n                                            ai.unit,\n                                            ai.numeric_range_min,\n                                            ai.numeric_range_max,\n                                            ai.text_value,\n                                            ai.text_syntax,\n                                            ai.code_title,\n                                            ai.code_list,\n                                            ai.code_value\n                                        ) as ai_values\n                                )\n                            ) ai_values_array\n                        from\n                            hame.additional_information ai\n                            join codes.type_of_additional_information tai\n                                on ai.type_additional_information_id = tai.id\n                        where\n                            ai.plan_regulation_id = r.id\n                            AND tai.value != 'paakayttotarkoitus'\n                        group by tai.value\n                    ) ai_values\n                ),\n                '{}'::jsonb\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.land_use_area_id = $1\n        AND EXISTS (  -- select only regulations that have paakayttotarkoitus additional information\n            select\n            from hame.additional_information ai\n            where\n            ai.plan_regulation_id = r.id\n            AND ai.type_additional_information_id = (\n                select id\n                from codes.type_of_additional_information\n                where value = 'paakayttotarkoitus')\n        )\n$$",
    )
    op.replace_entity(hame_primary_use_regulations)

    hame_sub_area_regulations = PGFunction(
        schema="hame",
        signature="sub_area_regulations(other_area_id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE sql\nAS\n$$\n    select\n        jsonb_object_agg(\n            tpr.value,\n            coalesce(\n                (\n                    select\n                        jsonb_object_agg(\n                            ai_type,\n                            ai_values_array\n                        )\n                    from (\n                        select\n                            tai.value ai_type,\n                            jsonb_agg(\n                                (\n                                    select\n                                        jsonb_strip_nulls(to_jsonb(ai_values))\n                                    from (\n                                        select\n                                                ai.numeric_value,\n                                                ai.unit,\n                                                ai.numeric_range_min,\n                                                ai.numeric_range_max,\n                                                ai.text_value,\n                                                ai.text_syntax,\n                                                ai.code_title,\n                                                ai.code_list,\n                                                ai.code_value\n                                    ) as ai_values\n                                )\n                            ) as ai_values_array\n                        from\n                            hame.additional_information ai\n                            join codes.type_of_additional_information tai\n                                on ai.type_additional_information_id = tai.id\n                        where\n                            ai.plan_regulation_id = r.id\n                            AND tai.value != 'osaAlue'\n                        group by tai.value\n                    ) ai_values\n                ),\n                '{}'::jsonb\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.other_area_id = $1\n        AND EXISTS (  -- select only regulations that have osaAlue additional information\n            select\n            from hame.additional_information ai\n            where\n                ai.plan_regulation_id = r.id\n                AND ai.type_additional_information_id = (\n                    select id\n                    from codes.type_of_additional_information\n                    where value = 'osaAlue')\n        )\n$$",
    )
    op.replace_entity(hame_sub_area_regulations)

    hame_type_regulations = PGFunction(
        schema="hame",
        signature="type_regulations(table_name text, id uuid)",
        definition="RETURNS jsonb\n    STABLE\n    PARALLEL SAFE\n    LANGUAGE plpgsql\nAS\n$BODY$\nDECLARE\n    return_value jsonb;\nBEGIN\n    EXECUTE format(\n        $SQL$\n        select\n            jsonb_object_agg(\n                tpr.value,\n                coalesce(\n                    (\n                        select\n                            jsonb_object_agg(\n                                ai_type,\n                                ai_values_array\n                            )\n                        from (\n                            select\n                                tai.value ai_type,\n                                jsonb_agg(\n                                    (\n                                        select\n                                        jsonb_strip_nulls(to_jsonb(ai_values))\n                                        from\n                                            (\n                                            select\n                                                ai.numeric_value,\n                                                ai.unit,\n                                                ai.numeric_range_min,\n                                                ai.numeric_range_max,\n                                                ai.text_value,\n                                                ai.text_syntax,\n                                                ai.code_title,\n                                                ai.code_list,\n                                                ai.code_value\n                                            ) as ai_values\n                                    )\n                                ) as ai_values_array\n                            from\n                                hame.additional_information ai\n                                join codes.type_of_additional_information tai\n                                    on ai.type_additional_information_id = tai.id\n                            where\n                                ai.plan_regulation_id = r.id\n                            group by tai.value\n                        ) ai_values\n                    ),\n                    '{}'::jsonb\n                )\n            )\n        from\n            hame.regulation_group_association rga\n            join hame.plan_regulation_group rg\n                on rga.plan_regulation_group_id = rg.id\n            join hame.plan_regulation r\n                on rg.id = r.plan_regulation_group_id\n            join codes.type_of_plan_regulation tpr\n                on r.type_of_plan_regulation_id = tpr.id\n        where\n            rga.%I = $1\n            AND r.value_data_type is null\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$BODY$",
    )
    op.replace_entity(hame_type_regulations)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_type_regulations = PGFunction(
        schema="hame",
        signature="type_regulations(table_name text, id uuid)",
        definition="returns jsonb\n LANGUAGE plpgsql\n STABLE PARALLEL SAFE\nAS $function$\nDECLARE\n    return_value jsonb;\nBEGIN\n    EXECUTE format(\n        $SQL$\n        select\n            json_object_agg(\n                tpr.value,\n                (\n                    select\n                        json_object_agg(\n                            tai.value,\n                            (\n                                select\n                                jsonb_strip_nulls(to_jsonb(ai_values))\n                                from\n                                    (\n                                    select\n                                        ai.numeric_value,\n                                        ai.unit,\n                                        ai.numeric_range_min,\n                                        ai.numeric_range_max,\n                                        ai.text_value,\n                                        ai.text_syntax,\n                                        ai.code_title,\n                                        ai.code_list,\n                                        ai.code_value\n                                    ) as ai_values\n                            )\n                        ) as ai_json\n                    from\n                        hame.additional_information ai\n                        join codes.type_of_additional_information tai\n                            on ai.type_additional_information_id = tai.id\n                    where\n                        ai.plan_regulation_id = r.id\n                )\n            )\n        from\n            hame.regulation_group_association rga\n            join hame.plan_regulation_group rg\n                on rga.plan_regulation_group_id = rg.id\n            join hame.plan_regulation r\n                on rg.id = r.plan_regulation_group_id\n            join codes.type_of_plan_regulation tpr\n                on r.type_of_plan_regulation_id = tpr.id\n        where\n            rga.%I = $1\n            AND r.value_data_type is null\n        $SQL$,\n        table_name||'_id'\n    )\n    INTO return_value\n    USING id;\n\n    RETURN return_value;\nEND;\n$function$",
    )
    op.replace_entity(hame_type_regulations)
    hame_sub_area_regulations = PGFunction(
        schema="hame",
        signature="sub_area_regulations(other_area_id uuid)",
        definition="returns jsonb\n LANGUAGE sql\n STABLE PARALLEL SAFE\nAS $function$\n    select\n        json_object_agg(\n            tpr.value,\n            (\n                select\n                    json_object_agg(\n                        tai.value,\n                        (\n                            select\n                                jsonb_strip_nulls(to_jsonb(ai_values))\n                            from (\n                                select\n                                        ai.numeric_value,\n                                        ai.unit,\n                                        ai.numeric_range_min,\n                                        ai.numeric_range_max,\n                                        ai.text_value,\n                                        ai.text_syntax,\n                                        ai.code_title,\n                                        ai.code_list,\n                                        ai.code_value\n                            ) as ai_values\n                        )\n                    ) as ai_json\n                from\n                    hame.additional_information ai\n                    join codes.type_of_additional_information tai\n                        on ai.type_additional_information_id = tai.id\n                where\n                    ai.plan_regulation_id = r.id\n                    AND tai.value != 'osaAlue'\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.other_area_id = $1\n        AND EXISTS (  -- select only regulations that have osaAlue additional information\n            select\n            from hame.additional_information ai \n            where\n                ai.plan_regulation_id = r.id\n                AND ai.type_additional_information_id = (\n                    select id\n                    from codes.type_of_additional_information\n                    where value = 'osaAlue')\n        )\n$function$",
    )
    op.replace_entity(hame_sub_area_regulations)
    hame_primary_use_regulations = PGFunction(
        schema="hame",
        signature="primary_use_regulations(land_use_area_id uuid)",
        definition="returns jsonb\n LANGUAGE sql\n STABLE PARALLEL SAFE\nAS $function$\n    select\n        jsonb_object_agg(\n            tpr.value,\n            (\n                select\n                    json_object_agg(\n                        tai.value,\n                        (\n                            select\n                            jsonb_strip_nulls(to_jsonb(ai_values))\n                            from\n                                (\n                                select\n                                    ai.numeric_value,\n                                    ai.unit,\n                                    ai.numeric_range_min,\n                                    ai.numeric_range_max,\n                                    ai.text_value,\n                                    ai.text_syntax,\n                                    ai.code_title,\n                                    ai.code_list,\n                                    ai.code_value\n                                ) as ai_values\n                        )\n                    ) as ai_json\n                from\n                    hame.additional_information ai\n                    join codes.type_of_additional_information tai\n                        on ai.type_additional_information_id = tai.id\n                where\n                    ai.plan_regulation_id = r.id\n                    AND tai.value != 'paakayttotarkoitus'\n            )\n        )\n    from\n        hame.regulation_group_association rga\n        join hame.plan_regulation_group rg\n            on rga.plan_regulation_group_id = rg.id\n        join hame.plan_regulation r\n            on rg.id = r.plan_regulation_group_id\n        join codes.type_of_plan_regulation tpr\n            on r.type_of_plan_regulation_id = tpr.id\n    where\n        rga.land_use_area_id = $1\n        AND EXISTS (  -- select only regulations that have paakayttotarkoitus additional information\n            select\n            from hame.additional_information ai\n            where\n            ai.plan_regulation_id = r.id\n            AND ai.type_additional_information_id = (\n                select id\n                from codes.type_of_additional_information\n                where value = 'paakayttotarkoitus')\n        )\n$function$",
    )
    op.replace_entity(hame_primary_use_regulations)
    # ### end Alembic commands ###
