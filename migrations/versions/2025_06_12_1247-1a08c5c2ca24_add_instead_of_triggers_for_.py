"""Add instead of triggers for visualization views

Revision ID: 1a08c5c2ca24
Revises: 59ccf36de6e5
Create Date: 2025-06-12 12:47:24.411670

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = "1a08c5c2ca24"
down_revision: Union[str, None] = "59ccf36de6e5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_trgf_iiud = PGFunction(
        schema="hame",
        signature="trgf_iiud()",
        definition="RETURNS TRIGGER\n    LANGUAGE plpgsql AS\n$$\nDECLARE\n    _tbl  regclass := quote_ident(TG_TABLE_SCHEMA) || '.'\n                    || quote_ident(substring(TG_TABLE_NAME from '(.+)_v$'));\n    _cols text;\n    _vals text;\nBEGIN\n    IF TG_OP = 'DELETE' THEN\n        EXECUTE format(\n            'DELETE FROM %s WHERE id = $1',\n            _tbl\n        )   \n        USING OLD.id;\n        RETURN OLD;\n    END IF;\n\n    SELECT INTO _cols, _vals\n            string_agg(quote_ident(attname), ', '),\n            string_agg('x.' || quote_ident(attname), ', ')\n    FROM pg_attribute\n    WHERE\n        attrelid = _tbl\n        AND NOT attisdropped   -- no dropped (dead) columns\n        AND attnum > 0;        -- no system columns\n\n    CASE TG_OP\n        WHEN 'INSERT' THEN\n            EXECUTE format('\n                INSERT INTO %s(%s) SELECT %s\n                FROM  (SELECT ($1).*) x',\n            _tbl, _cols, _vals\n            )\n            USING NEW;\n        WHEN 'UPDATE' THEN\n            EXECUTE format('\n                UPDATE %s a\n                SET   (%s) = (%s)\n                FROM  (SELECT ($2).*) x\n                WHERE a.id = $1',\n                _tbl, _cols, _vals\n            )\n            USING OLD.id, NEW;\n    END CASE;\n\nRETURN NEW;\nEND\n$$",
    )
    op.create_entity(hame_trgf_iiud)

    hame_land_use_point_v_trg_iiud_land_use_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_land_use_point_v",
        on_entity="hame.land_use_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.land_use_point_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_land_use_point_v_trg_iiud_land_use_point_v)

    hame_other_area_v_trg_iiud_other_area_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_other_area_v",
        on_entity="hame.other_area_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.other_area_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_other_area_v_trg_iiud_other_area_v)

    hame_other_point_v_trg_iiud_other_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_other_point_v",
        on_entity="hame.other_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.other_point_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_other_point_v_trg_iiud_other_point_v)

    hame_line_v_trg_iiud_line_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_line_v",
        on_entity="hame.line_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.line_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_line_v_trg_iiud_line_v)

    hame_land_use_area_v_trg_iiud_land_use_area_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_land_use_area_v",
        on_entity="hame.land_use_area_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.land_use_area_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_land_use_area_v_trg_iiud_land_use_area_v)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_land_use_area_v_trg_iiud_land_use_area_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_land_use_area_v",
        on_entity="hame.land_use_area_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.land_use_area_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_land_use_area_v_trg_iiud_land_use_area_v)

    hame_line_v_trg_iiud_line_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_line_v",
        on_entity="hame.line_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.line_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_line_v_trg_iiud_line_v)

    hame_other_point_v_trg_iiud_other_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_other_point_v",
        on_entity="hame.other_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.other_point_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_other_point_v_trg_iiud_other_point_v)

    hame_other_area_v_trg_iiud_other_area_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_other_area_v",
        on_entity="hame.other_area_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.other_area_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_other_area_v_trg_iiud_other_area_v)

    hame_land_use_point_v_trg_iiud_land_use_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_land_use_point_v",
        on_entity="hame.land_use_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR UPDATE OR DELETE\nON hame.land_use_point_v\nFOR EACH ROW\nEXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_land_use_point_v_trg_iiud_land_use_point_v)

    hame_trgf_iiud = PGFunction(
        schema="hame",
        signature="trgf_iiud()",
        definition="RETURNS TRIGGER\n    LANGUAGE plpgsql AS\n$$\nDECLARE\n    _tbl  regclass := quote_ident(TG_TABLE_SCHEMA) || '.'\n                    || quote_ident(substring(TG_TABLE_NAME from '(.+)_v$'));\n    _cols text;\n    _vals text;\nBEGIN\n    IF TG_OP = 'DELETE' THEN\n        EXECUTE format(\n            'DELETE FROM %s WHERE id = $1',\n            _tbl\n        )   \n        USING OLD.id;\n        RETURN OLD;\n    END IF;\n\n    SELECT INTO _cols, _vals\n            string_agg(quote_ident(attname), ', '),\n            string_agg('x.' || quote_ident(attname), ', ')\n    FROM pg_attribute\n    WHERE\n        attrelid = _tbl\n        AND NOT attisdropped   -- no dropped (dead) columns\n        AND attnum > 0;        -- no system columns\n\n    CASE TG_OP\n        WHEN 'INSERT' THEN\n            EXECUTE format('\n                INSERT INTO %s(%s) SELECT %s\n                FROM  (SELECT ($1).*) x',\n            _tbl, _cols, _vals\n            )\n            USING NEW;\n        WHEN 'UPDATE' THEN\n            EXECUTE format('\n                UPDATE %s a\n                SET   (%s) = (%s)\n                FROM  (SELECT ($2).*) x\n                WHERE a.id = $1',\n                _tbl, _cols, _vals\n            )\n            USING OLD.id, NEW;\n    END CASE;\n\nRETURN NEW;\nEND\n$$",
    )
    op.drop_entity(hame_trgf_iiud)

    # ### end Alembic commands ###
