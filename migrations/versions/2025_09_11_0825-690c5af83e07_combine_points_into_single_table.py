"""combine_points_into_single_table

Revision ID: 690c5af83e07
Revises: 3dcbee6ccdc2
Create Date: 2025-09-11 08:25:59.766036

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from alembic_utils.pg_view import PGView
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "690c5af83e07"
down_revision: Union[str, None] = "043da5985f91"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    point_table = op.create_table(
        "point",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOINT",
                srid=3067,
                dimension=2,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "name", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("source_data_object", sa.String(), nullable=True),
        sa.Column("height_min", sa.Float(), nullable=True),
        sa.Column("height_max", sa.Float(), nullable=True),
        sa.Column("height_unit", sa.String(), nullable=True),
        sa.Column("height_reference_point", sa.String(), nullable=True),
        sa.Column("ordering", sa.Integer(), nullable=True),
        sa.Column(
            "type_of_underground_id", sa.UUID(as_uuid=False), nullable=False
        ),
        sa.Column("plan_id", sa.UUID(as_uuid=False), nullable=True),
        sa.Column("exported_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column(
            "lifecycle_status_id", sa.UUID(as_uuid=False), nullable=False
        ),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name="plan_lifecycle_status_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["hame.plan.id"], name="plan_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name="type_of_underground_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="hame",
    )

    meta = sa.MetaData()
    engine = op.get_bind()
    land_use_point_table = sa.Table("land_use_point", meta, schema="hame", autoload_with=engine)
    other_point_table = sa.Table("other_point", meta, schema="hame", autoload_with=engine)
    
    land_use_point_columns = {c.name: c for c in land_use_point_table.columns}
    other_point_columns = {c.name: c for c in other_point_table.columns}
    point_columns = {c.name: c for c in point_table.columns}

    # Copy land_use_point data
    common_columns = list(set(land_use_point_columns.keys()).intersection(set(point_columns.keys())))
    insert_stmt = sa.insert(point_table).from_select(
        [point_columns[col_name] for col_name in common_columns],
        sa.select(*[land_use_point_columns[col_name] for col_name in common_columns])
    )
    op.execute(insert_stmt)

    # Copy other_point data
    common_columns = list(set(other_point_columns.keys()).intersection(set(point_columns.keys())))
    insert_stmt = sa.insert(point_table).from_select(
        [point_columns[col_name] for col_name in common_columns],
        sa.select(*[other_point_columns[col_name] for col_name in common_columns])
    )
    op.execute(insert_stmt)

    op.create_index(
        op.f("ix_hame_point_lifecycle_status_id"),
        "point",
        ["lifecycle_status_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_point_plan_id"),
        "point",
        ["plan_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_point_type_of_underground_id"),
        "point",
        ["type_of_underground_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        "ix_point_plan_id_ordering",
        "point",
        ["plan_id", "ordering"],
        unique=True,
        schema="hame",
    )
    op.drop_index(
        op.f("idx_land_use_point_geom"),
        table_name="land_use_point",
        schema="hame",
        postgresql_using="gist",
    )
    op.drop_index(
        op.f("ix_hame_land_use_point_lifecycle_status_id"),
        table_name="land_use_point",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_land_use_point_plan_id"),
        table_name="land_use_point",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_land_use_point_type_of_underground_id"),
        table_name="land_use_point",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_land_use_point_plan_id_ordering"),
        table_name="land_use_point",
        schema="hame",
    )

    op.drop_index(
        op.f("idx_other_point_geom"),
        table_name="other_point",
        schema="hame",
        postgresql_using="gist",
    )
    op.drop_index(
        op.f("ix_hame_other_point_lifecycle_status_id"),
        table_name="other_point",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_other_point_plan_id"),
        table_name="other_point",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_other_point_type_of_underground_id"),
        table_name="other_point",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_other_point_plan_id_ordering"),
        table_name="other_point",
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column("point_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )

    op.execute("UPDATE hame.lifecycle_date SET point_id = land_use_point_id WHERE land_use_point_id IS NOT NULL")
    op.execute("UPDATE hame.lifecycle_date SET point_id = other_point_id WHERE other_point_id IS NOT NULL")

    op.drop_constraint(
        op.f("land_use_point_id_fkey"),
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("other_point_id_fkey"),
        "lifecycle_date",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "point_id_fkey",
        "lifecycle_date",
        "point",
        ["point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.drop_column("lifecycle_date", "other_point_id", schema="hame")
    op.drop_column("lifecycle_date", "land_use_point_id", schema="hame")
    op.add_column(
        "regulation_group_association",
        sa.Column("point_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )

    op.execute("UPDATE hame.regulation_group_association SET point_id = land_use_point_id WHERE land_use_point_id IS NOT NULL")
    op.execute("UPDATE hame.regulation_group_association SET point_id = other_point_id WHERE other_point_id IS NOT NULL")

    op.drop_index(
        op.f("ix_hame_regulation_group_association_land_use_point_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_other_point_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_point_id"),
        "regulation_group_association",
        ["point_id"],
        unique=False,
        schema="hame",
    )
    op.drop_constraint(
        op.f("other_point_id_fkey"),
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("land_use_point_id_fkey"),
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "point_id_fkey",
        "regulation_group_association",
        "point",
        ["point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.drop_column(
        "regulation_group_association", "other_point_id", schema="hame"
    )
    op.drop_column(
        "regulation_group_association", "land_use_point_id", schema="hame"
    )

    hame_land_use_point_trg_land_use_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_modified_at",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON hame.land_use_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_modified_at)

    hame_other_point_trg_other_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_other_point_modified_at",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON hame.other_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_other_point_trg_other_point_modified_at)

    hame_plan_trg_land_use_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_point_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_land_use_point_update_lifecycle_status)

    hame_plan_trg_other_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_point_update_lifecycle_status()",
    )
    op.drop_entity(hame_plan_trg_other_point_update_lifecycle_status)

    hame_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_land_use_point_update_lifecycle_status)

    hame_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.drop_entity(hame_trgfunc_other_point_update_lifecycle_status)

    hame_land_use_point_trg_land_use_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_add_plan_id_fkey",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.land_use_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_add_plan_id_fkey)

    hame_other_point_trg_other_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_other_point_add_plan_id_fkey",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.drop_entity(hame_other_point_trg_other_point_add_plan_id_fkey)

    hame_land_use_point_trg_new_land_use_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_land_use_point_add_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="AFTER INSERT ON hame.land_use_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(
        hame_land_use_point_trg_new_land_use_point_add_lifecycle_date
    )

    hame_other_point_trg_new_other_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_other_point_add_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="AFTER INSERT ON hame.other_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.drop_entity(hame_other_point_trg_new_other_point_add_lifecycle_date)

    hame_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_date)

    hame_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.drop_entity(hame_other_point_trg_other_point_new_lifecycle_date)

    hame_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.land_use_point FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.drop_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_status)

    hame_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_point FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.drop_entity(hame_other_point_trg_other_point_new_lifecycle_status)

    hame_land_use_point_v_trg_iiud_land_use_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_land_use_point_v",
        on_entity="hame.land_use_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR DELETE OR UPDATE ON hame.land_use_point_v FOR EACH ROW EXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_land_use_point_v_trg_iiud_land_use_point_v)

    hame_other_point_v_trg_iiud_other_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_other_point_v",
        on_entity="hame.other_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR DELETE OR UPDATE ON hame.other_point_v FOR EACH ROW EXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.drop_entity(hame_other_point_v_trg_iiud_other_point_v)

    hame_land_use_point_v = PGView(
        schema="hame",
        signature="land_use_point_v",
        definition="SELECT land_use_point.geom,\n    land_use_point.name,\n    land_use_point.source_data_object,\n    land_use_point.height_unit,\n    land_use_point.ordering,\n    land_use_point.type_of_underground_id,\n    land_use_point.plan_id,\n    land_use_point.exported_at,\n    land_use_point.lifecycle_status_id,\n    land_use_point.id,\n    land_use_point.created_at,\n    land_use_point.modified_at,\n    land_use_point.description,\n    land_use_point.height_min,\n    land_use_point.height_max,\n    land_use_point.height_reference_point,\n    hame.short_names('land_use_point'::text, land_use_point.id) AS short_names,\n    hame.type_regulations('land_use_point'::text, land_use_point.id) AS type_regulations,\n    hame.regulation_values('land_use_point'::text, land_use_point.id) AS regulation_values\n   FROM hame.land_use_point",
    )
    op.drop_entity(hame_land_use_point_v)

    hame_other_point_v = PGView(
        schema="hame",
        signature="other_point_v",
        definition="SELECT other_point.geom,\n    other_point.name,\n    other_point.source_data_object,\n    other_point.height_unit,\n    other_point.ordering,\n    other_point.type_of_underground_id,\n    other_point.plan_id,\n    other_point.exported_at,\n    other_point.lifecycle_status_id,\n    other_point.id,\n    other_point.created_at,\n    other_point.modified_at,\n    other_point.description,\n    other_point.height_min,\n    other_point.height_max,\n    other_point.height_reference_point,\n    hame.short_names('other_point'::text, other_point.id) AS short_names,\n    hame.type_regulations('other_point'::text, other_point.id) AS type_regulations,\n    hame.regulation_values('other_point'::text, other_point.id) AS regulation_values\n   FROM hame.other_point",
    )
    op.drop_entity(hame_other_point_v)

    op.drop_table("land_use_point", schema="hame")
    op.drop_table("other_point", schema="hame")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "land_use_point",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOINT",
                srid=3067,
                dimension=2,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
                _spatial_index_reflected=True,
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "source_data_object",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_unit", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ordering", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "type_of_underground_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("plan_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "exported_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "lifecycle_status_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_min",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_max",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_reference_point",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name=op.f("plan_lifecycle_status_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["hame.plan.id"], name=op.f("plan_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name=op.f("type_of_underground_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("land_use_point_pkey")),
        schema="hame",
    )
    op.create_table(
        "other_point",
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOINT",
                srid=3067,
                dimension=2,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
                _spatial_index_reflected=True,
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "name",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "source_data_object",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_unit", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ordering", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "type_of_underground_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("plan_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "exported_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "lifecycle_status_id",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "modified_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "description",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_min",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_max",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height_reference_point",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["lifecycle_status_id"],
            ["codes.lifecycle_status.id"],
            name=op.f("plan_lifecycle_status_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"], ["hame.plan.id"], name=op.f("plan_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["type_of_underground_id"],
            ["codes.type_of_underground.id"],
            name=op.f("type_of_underground_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("other_point_pkey")),
        schema="hame",
    )
    hame_other_point_v = PGView(
        schema="hame",
        signature="other_point_v",
        definition="SELECT other_point.geom,\n    other_point.name,\n    other_point.source_data_object,\n    other_point.height_unit,\n    other_point.ordering,\n    other_point.type_of_underground_id,\n    other_point.plan_id,\n    other_point.exported_at,\n    other_point.lifecycle_status_id,\n    other_point.id,\n    other_point.created_at,\n    other_point.modified_at,\n    other_point.description,\n    other_point.height_min,\n    other_point.height_max,\n    other_point.height_reference_point,\n    hame.short_names('other_point'::text, other_point.id) AS short_names,\n    hame.type_regulations('other_point'::text, other_point.id) AS type_regulations,\n    hame.regulation_values('other_point'::text, other_point.id) AS regulation_values\n   FROM hame.other_point",
    )
    op.create_entity(hame_other_point_v)

    hame_land_use_point_v = PGView(
        schema="hame",
        signature="land_use_point_v",
        definition="SELECT land_use_point.geom,\n    land_use_point.name,\n    land_use_point.source_data_object,\n    land_use_point.height_unit,\n    land_use_point.ordering,\n    land_use_point.type_of_underground_id,\n    land_use_point.plan_id,\n    land_use_point.exported_at,\n    land_use_point.lifecycle_status_id,\n    land_use_point.id,\n    land_use_point.created_at,\n    land_use_point.modified_at,\n    land_use_point.description,\n    land_use_point.height_min,\n    land_use_point.height_max,\n    land_use_point.height_reference_point,\n    hame.short_names('land_use_point'::text, land_use_point.id) AS short_names,\n    hame.type_regulations('land_use_point'::text, land_use_point.id) AS type_regulations,\n    hame.regulation_values('land_use_point'::text, land_use_point.id) AS regulation_values\n   FROM hame.land_use_point",
    )
    op.create_entity(hame_land_use_point_v)

    hame_other_point_v_trg_iiud_other_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_other_point_v",
        on_entity="hame.other_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR DELETE OR UPDATE ON hame.other_point_v FOR EACH ROW EXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_other_point_v_trg_iiud_other_point_v)

    hame_land_use_point_v_trg_iiud_land_use_point_v = PGTrigger(
        schema="hame",
        signature="trg_iiud_land_use_point_v",
        on_entity="hame.land_use_point_v",
        is_constraint=False,
        definition="INSTEAD OF INSERT OR DELETE OR UPDATE ON hame.land_use_point_v FOR EACH ROW EXECUTE FUNCTION hame.trgf_iiud()",
    )
    op.create_entity(hame_land_use_point_v_trg_iiud_land_use_point_v)

    hame_other_point_trg_other_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_status",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_point FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.create_entity(hame_other_point_trg_other_point_new_lifecycle_status)

    hame_land_use_point_trg_land_use_point_new_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_status",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.land_use_point FOR EACH ROW WHEN ((new.plan_id IS NOT NULL)) EXECUTE FUNCTION hame.trgfunc_plan_object_new_lifecycle_status()",
    )
    op.create_entity(
        hame_land_use_point_trg_land_use_point_new_lifecycle_status
    )

    hame_other_point_trg_other_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_other_point_new_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.other_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.create_entity(hame_other_point_trg_other_point_new_lifecycle_date)

    hame_land_use_point_trg_land_use_point_new_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_new_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.land_use_point FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_new_lifecycle_date()",
    )
    op.create_entity(hame_land_use_point_trg_land_use_point_new_lifecycle_date)

    hame_other_point_trg_new_other_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_other_point_add_lifecycle_date",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="AFTER INSERT ON hame.other_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(hame_other_point_trg_new_other_point_add_lifecycle_date)

    hame_land_use_point_trg_new_land_use_point_add_lifecycle_date = PGTrigger(
        schema="hame",
        signature="trg_new_land_use_point_add_lifecycle_date",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="AFTER INSERT ON hame.land_use_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_new_object_add_lifecycle_date()",
    )
    op.create_entity(
        hame_land_use_point_trg_new_land_use_point_add_lifecycle_date
    )

    hame_other_point_trg_other_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_other_point_add_plan_id_fkey",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.other_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_other_point_trg_other_point_add_plan_id_fkey)

    hame_land_use_point_trg_land_use_point_add_plan_id_fkey = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_add_plan_id_fkey",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.land_use_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_add_plan_id_fkey()",
    )
    op.create_entity(hame_land_use_point_trg_land_use_point_add_plan_id_fkey)

    hame_trgfunc_other_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_other_point_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.other_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_other_point_update_lifecycle_status)

    hame_trgfunc_land_use_point_update_lifecycle_status = PGFunction(
        schema="hame",
        signature="trgfunc_land_use_point_update_lifecycle_status()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE hame.land_use_point\n            SET lifecycle_status_id = NEW.lifecycle_status_id\n            WHERE (plan_id = NEW.id\n            AND lifecycle_status_id = OLD.lifecycle_status_id);\n            RETURN NEW;\n        END;\n        $function$",
    )
    op.create_entity(hame_trgfunc_land_use_point_update_lifecycle_status)

    hame_plan_trg_other_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_other_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_other_point_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_other_point_update_lifecycle_status)

    hame_plan_trg_land_use_point_update_lifecycle_status = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_update_lifecycle_status",
        on_entity="hame.plan",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan FOR EACH ROW WHEN ((new.lifecycle_status_id <> old.lifecycle_status_id)) EXECUTE FUNCTION hame.trgfunc_land_use_point_update_lifecycle_status()",
    )
    op.create_entity(hame_plan_trg_land_use_point_update_lifecycle_status)

    hame_other_point_trg_other_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_other_point_modified_at",
        on_entity="hame.other_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON hame.other_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_other_point_trg_other_point_modified_at)

    hame_land_use_point_trg_land_use_point_modified_at = PGTrigger(
        schema="hame",
        signature="trg_land_use_point_modified_at",
        on_entity="hame.land_use_point",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON hame.land_use_point FOR EACH ROW EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_land_use_point_trg_land_use_point_modified_at)

    op.add_column(
        "regulation_group_association",
        sa.Column(
            "land_use_point_id", sa.UUID(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.add_column(
        "regulation_group_association",
        sa.Column(
            "other_point_id", sa.UUID(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.drop_constraint(
        "point_id_fkey",
        "regulation_group_association",
        schema="hame",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("land_use_point_id_fkey"),
        "regulation_group_association",
        "land_use_point",
        ["land_use_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("other_point_id_fkey"),
        "regulation_group_association",
        "other_point",
        ["other_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.drop_index(
        op.f("ix_hame_regulation_group_association_point_id"),
        table_name="regulation_group_association",
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_other_point_id"),
        "regulation_group_association",
        ["other_point_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_regulation_group_association_land_use_point_id"),
        "regulation_group_association",
        ["land_use_point_id"],
        unique=False,
        schema="hame",
    )
    op.drop_column("regulation_group_association", "point_id", schema="hame")
    op.add_column(
        "lifecycle_date",
        sa.Column(
            "land_use_point_id", sa.UUID(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.add_column(
        "lifecycle_date",
        sa.Column(
            "other_point_id", sa.UUID(), autoincrement=False, nullable=True
        ),
        schema="hame",
    )
    op.drop_constraint(
        "point_id_fkey", "lifecycle_date", schema="hame", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("other_point_id_fkey"),
        "lifecycle_date",
        "other_point",
        ["other_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("land_use_point_id_fkey"),
        "lifecycle_date",
        "land_use_point",
        ["land_use_point_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        ondelete="CASCADE",
    )
    op.drop_column("lifecycle_date", "point_id", schema="hame")
    
    op.create_index(
        op.f("ix_other_point_plan_id_ordering"),
        "other_point",
        ["plan_id", "ordering"],
        unique=True,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_other_point_type_of_underground_id"),
        "other_point",
        ["type_of_underground_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_other_point_plan_id"),
        "other_point",
        ["plan_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_other_point_lifecycle_status_id"),
        "other_point",
        ["lifecycle_status_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("idx_other_point_geom"),
        "other_point",
        ["geom"],
        unique=False,
        schema="hame",
        postgresql_using="gist",
    )
    op.create_index(
        op.f("ix_land_use_point_plan_id_ordering"),
        "land_use_point",
        ["plan_id", "ordering"],
        unique=True,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_land_use_point_type_of_underground_id"),
        "land_use_point",
        ["type_of_underground_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_land_use_point_plan_id"),
        "land_use_point",
        ["plan_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_land_use_point_lifecycle_status_id"),
        "land_use_point",
        ["lifecycle_status_id"],
        unique=False,
        schema="hame",
    )
    op.create_index(
        op.f("idx_land_use_point_geom"),
        "land_use_point",
        ["geom"],
        unique=False,
        schema="hame",
        postgresql_using="gist",
    )
    op.drop_index(
        "ix_point_plan_id_ordering", table_name="point", schema="hame"
    )
    op.drop_index(
        op.f("ix_hame_point_type_of_underground_id"),
        table_name="point",
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_point_plan_id"), table_name="point", schema="hame"
    )
    op.drop_index(
        op.f("ix_hame_point_lifecycle_status_id"),
        table_name="point",
        schema="hame",
    )
    op.drop_table("point", schema="hame")
    # ### end Alembic commands ###
