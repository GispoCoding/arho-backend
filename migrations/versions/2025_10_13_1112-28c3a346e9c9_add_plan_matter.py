"""Add plan matter

Revision ID: 28c3a346e9c9
Revises: 838e36749db6
Create Date: 2025-10-13 11:12:05.454472

"""

from collections.abc import Sequence

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "28c3a346e9c9"
down_revision: str | None = "838e36749db6"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "plan_matter",
        sa.Column("name", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "description", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("permanent_plan_identifier", sa.String(), nullable=True),
        sa.Column("producers_plan_identifier", sa.String(), nullable=True),
        sa.Column("case_identifier", sa.String(), nullable=True),
        sa.Column("record_number", sa.String(), nullable=True),
        sa.Column("plan_type_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column("organisation_id", sa.UUID(as_uuid=False), nullable=False),
        sa.Column(
            "id",
            sa.UUID(as_uuid=False),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.FetchedValue(),
            nullable=True,
        ),
        sa.Column(
            "modified_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.FetchedValue(),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["organisation_id"], ["hame.organisation.id"], name="organisation_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["plan_type_id"], ["codes.plan_type.id"], name="plan_type_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("plan_matter_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )
    hame_plan_matter_trg_plan_matter_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_matter_modified_at",
        on_entity="hame.plan_matter",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON hame.plan_matter\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.create_entity(hame_plan_matter_trg_plan_matter_modified_at)

    hame_plan_matter_trg_plan_matter_created_at = PGTrigger(
        schema="hame",
        signature="trg_plan_matter_created_at",
        on_entity="hame.plan_matter",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_matter\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_created_at()",
    )
    op.create_entity(hame_plan_matter_trg_plan_matter_created_at)

    # Create plan matter from each existing plan.
    # For creating references use temporarily plan id as plan_matter id and then change it later.

    op.execute("""
        INSERT INTO hame.plan_matter (
            id,
            name,
            description,
            permanent_plan_identifier,
            producers_plan_identifier,
            case_identifier,
            record_number,
            plan_type_id,
            organisation_id
        )
        SELECT
            id,
            name,
            description,
            permanent_plan_identifier,
            producers_plan_identifier,
            matter_management_identifier,
            record_number,
            plan_type_id,
            organisation_id
        FROM hame.plan
    """
    )
    op.execute("""
        UPDATE hame.plan
        SET plan_matter_id = id
    """
    )
    op.create_foreign_key(
        "plan_matter_id_fkey",
        "plan",
        "plan_matter",
        ["plan_matter_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        onupdate="CASCADE",
    )

    op.add_column(
        "source_data",
        sa.Column("plan_matter_id", sa.UUID(as_uuid=False), nullable=True),
        schema="hame",
    )
    op.execute("""
        UPDATE hame.source_data
               SET plan_matter_id = plan_id
    """
    )
    op.alter_column(
        "source_data",
        "plan_matter_id",
        nullable=False,
        schema="hame",
    )
    op.create_index(
        op.f("ix_hame_source_data_plan_matter_id"),
        "source_data",
        ["plan_matter_id"],
        unique=False,
        schema="hame",
    )
    op.create_foreign_key(
        "plan_matter_id_fkey",
        "source_data",
        "plan_matter",
        ["plan_matter_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
        onupdate="CASCADE",
    )

    op.execute("""
        UPDATE hame.plan_matter
        SET id = gen_random_uuid()
    """
    )

    op.create_index(
        op.f("ix_hame_plan_plan_matter_id"),
        "plan",
        ["plan_matter_id"],
        unique=False,
        schema="hame",
    )
    op.drop_constraint(
        op.f("plan_type_id_fkey"), "plan", schema="hame", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("organisation_id_fkey"), "plan", schema="hame", type_="foreignkey"
    )

    op.drop_column("plan", "record_number", schema="hame")
    op.drop_column("plan", "producers_plan_identifier", schema="hame")
    op.drop_column("plan", "plan_type_id", schema="hame")
    op.drop_column("plan", "matter_management_identifier", schema="hame")
    op.drop_column("plan", "organisation_id", schema="hame")
    op.drop_column("plan", "permanent_plan_identifier", schema="hame")
    
    op.drop_constraint(
        op.f("plan_id_fkey"), "source_data", schema="hame", type_="foreignkey"
    )
    op.drop_index(
        op.f("ix_hame_source_data_plan_id"),
        table_name="source_data",
        schema="hame",
    )
    op.drop_column("source_data", "plan_id", schema="hame")
    
    hame_plan_matter_trg_plan_matter_001_no_created_at_update = PGTrigger(
        schema="hame",
        signature="trg_plan_matter_001_no_created_at_update",
        on_entity="hame.plan_matter",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan_matter\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_no_created_at_update()",
    )
    op.create_entity(hame_plan_matter_trg_plan_matter_001_no_created_at_update)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    hame_plan_matter_trg_plan_matter_001_no_created_at_update = PGTrigger(
        schema="hame",
        signature="trg_plan_matter_001_no_created_at_update",
        on_entity="hame.plan_matter",
        is_constraint=False,
        definition="BEFORE UPDATE ON hame.plan_matter\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_no_created_at_update()",
    )
    op.drop_entity(hame_plan_matter_trg_plan_matter_001_no_created_at_update)

    hame_plan_matter_trg_plan_matter_created_at = PGTrigger(
        schema="hame",
        signature="trg_plan_matter_created_at",
        on_entity="hame.plan_matter",
        is_constraint=False,
        definition="BEFORE INSERT ON hame.plan_matter\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_created_at()",
    )
    op.drop_entity(hame_plan_matter_trg_plan_matter_created_at)

    hame_plan_matter_trg_plan_matter_modified_at = PGTrigger(
        schema="hame",
        signature="trg_plan_matter_modified_at",
        on_entity="hame.plan_matter",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON hame.plan_matter\n        FOR EACH ROW\n        EXECUTE FUNCTION hame.trgfunc_modified_at()",
    )
    op.drop_entity(hame_plan_matter_trg_plan_matter_modified_at)

    op.add_column(
        "source_data",
        sa.Column("plan_id", sa.UUID(), autoincrement=False, nullable=False),
        schema="hame",
    )
    op.drop_constraint(
        "plan_matter_id_fkey", "source_data", schema="hame", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("plan_id_fkey"),
        "source_data",
        "plan",
        ["plan_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_index(
        op.f("ix_hame_source_data_plan_id"),
        "source_data",
        ["plan_id"],
        unique=False,
        schema="hame",
    )
    op.drop_index(
        op.f("ix_hame_source_data_plan_matter_id"),
        table_name="source_data",
        schema="hame",
    )
    op.drop_column("source_data", "plan_matter_id", schema="hame")
    op.add_column(
        "plan",
        sa.Column(
            "permanent_plan_identifier",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("organisation_id", sa.UUID(), autoincrement=False, nullable=False),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column(
            "matter_management_identifier",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("plan_type_id", sa.UUID(), autoincrement=False, nullable=False),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column(
            "producers_plan_identifier",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        schema="hame",
    )
    op.add_column(
        "plan",
        sa.Column("record_number", sa.VARCHAR(), autoincrement=False, nullable=True),
        schema="hame",
    )
    op.drop_constraint("plan_matter_id_fkey", "plan", schema="hame", type_="foreignkey")
    op.create_foreign_key(
        op.f("organisation_id_fkey"),
        "plan",
        "organisation",
        ["organisation_id"],
        ["id"],
        source_schema="hame",
        referent_schema="hame",
    )
    op.create_foreign_key(
        op.f("plan_type_id_fkey"),
        "plan",
        "plan_type",
        ["plan_type_id"],
        ["id"],
        source_schema="hame",
        referent_schema="codes",
    )
    op.drop_index(op.f("ix_hame_plan_plan_matter_id"), table_name="plan", schema="hame")
    op.drop_column("plan", "plan_matter_id", schema="hame")
    op.drop_table("plan_matter", schema="hame")
    # ### end Alembic commands ###
